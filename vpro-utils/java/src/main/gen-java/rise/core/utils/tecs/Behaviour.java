/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rise.core.utils.tecs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-01")
public class Behaviour implements org.apache.thrift.TBase<Behaviour, Behaviour._Fields>, java.io.Serializable, Cloneable, Comparable<Behaviour> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Behaviour");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GESTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("gesture", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TEXT_TO_SPEAK_FIELD_DESC = new org.apache.thrift.protocol.TField("textToSpeak", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MOOD_FIELD_DESC = new org.apache.thrift.protocol.TField("mood", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField SPEECH_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("speechSpeed", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SPEECH_PITCH_SHIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("speechPitchShift", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField SPEECH_SHAPE_FIELD_DESC = new org.apache.thrift.protocol.TField("speechShape", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BehaviourStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BehaviourTupleSchemeFactory());
  }

  public int id; // required
  public String gesture; // required
  public String textToSpeak; // required
  public String type; // optional
  public double mood; // optional
  public int speechSpeed; // optional
  public double speechPitchShift; // optional
  public int speechShape; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    GESTURE((short)2, "gesture"),
    TEXT_TO_SPEAK((short)3, "textToSpeak"),
    TYPE((short)4, "type"),
    MOOD((short)5, "mood"),
    SPEECH_SPEED((short)6, "speechSpeed"),
    SPEECH_PITCH_SHIFT((short)7, "speechPitchShift"),
    SPEECH_SHAPE((short)8, "speechShape");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // GESTURE
          return GESTURE;
        case 3: // TEXT_TO_SPEAK
          return TEXT_TO_SPEAK;
        case 4: // TYPE
          return TYPE;
        case 5: // MOOD
          return MOOD;
        case 6: // SPEECH_SPEED
          return SPEECH_SPEED;
        case 7: // SPEECH_PITCH_SHIFT
          return SPEECH_PITCH_SHIFT;
        case 8: // SPEECH_SHAPE
          return SPEECH_SHAPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MOOD_ISSET_ID = 1;
  private static final int __SPEECHSPEED_ISSET_ID = 2;
  private static final int __SPEECHPITCHSHIFT_ISSET_ID = 3;
  private static final int __SPEECHSHAPE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TYPE,_Fields.MOOD,_Fields.SPEECH_SPEED,_Fields.SPEECH_PITCH_SHIFT,_Fields.SPEECH_SHAPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GESTURE, new org.apache.thrift.meta_data.FieldMetaData("gesture", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT_TO_SPEAK, new org.apache.thrift.meta_data.FieldMetaData("textToSpeak", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOOD, new org.apache.thrift.meta_data.FieldMetaData("mood", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPEECH_SPEED, new org.apache.thrift.meta_data.FieldMetaData("speechSpeed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPEECH_PITCH_SHIFT, new org.apache.thrift.meta_data.FieldMetaData("speechPitchShift", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPEECH_SHAPE, new org.apache.thrift.meta_data.FieldMetaData("speechShape", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Behaviour.class, metaDataMap);
  }

  public Behaviour() {
  }

  public Behaviour(
    int id,
    String gesture,
    String textToSpeak)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.gesture = gesture;
    this.textToSpeak = textToSpeak;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Behaviour(Behaviour other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetGesture()) {
      this.gesture = other.gesture;
    }
    if (other.isSetTextToSpeak()) {
      this.textToSpeak = other.textToSpeak;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.mood = other.mood;
    this.speechSpeed = other.speechSpeed;
    this.speechPitchShift = other.speechPitchShift;
    this.speechShape = other.speechShape;
  }

  public Behaviour deepCopy() {
    return new Behaviour(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.gesture = null;
    this.textToSpeak = null;
    this.type = null;
    setMoodIsSet(false);
    this.mood = 0.0;
    setSpeechSpeedIsSet(false);
    this.speechSpeed = 0;
    setSpeechPitchShiftIsSet(false);
    this.speechPitchShift = 0.0;
    setSpeechShapeIsSet(false);
    this.speechShape = 0;
  }

  public int getId() {
    return this.id;
  }

  public Behaviour setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getGesture() {
    return this.gesture;
  }

  public Behaviour setGesture(String gesture) {
    this.gesture = gesture;
    return this;
  }

  public void unsetGesture() {
    this.gesture = null;
  }

  /** Returns true if field gesture is set (has been assigned a value) and false otherwise */
  public boolean isSetGesture() {
    return this.gesture != null;
  }

  public void setGestureIsSet(boolean value) {
    if (!value) {
      this.gesture = null;
    }
  }

  public String getTextToSpeak() {
    return this.textToSpeak;
  }

  public Behaviour setTextToSpeak(String textToSpeak) {
    this.textToSpeak = textToSpeak;
    return this;
  }

  public void unsetTextToSpeak() {
    this.textToSpeak = null;
  }

  /** Returns true if field textToSpeak is set (has been assigned a value) and false otherwise */
  public boolean isSetTextToSpeak() {
    return this.textToSpeak != null;
  }

  public void setTextToSpeakIsSet(boolean value) {
    if (!value) {
      this.textToSpeak = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public Behaviour setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public double getMood() {
    return this.mood;
  }

  public Behaviour setMood(double mood) {
    this.mood = mood;
    setMoodIsSet(true);
    return this;
  }

  public void unsetMood() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MOOD_ISSET_ID);
  }

  /** Returns true if field mood is set (has been assigned a value) and false otherwise */
  public boolean isSetMood() {
    return EncodingUtils.testBit(__isset_bitfield, __MOOD_ISSET_ID);
  }

  public void setMoodIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MOOD_ISSET_ID, value);
  }

  public int getSpeechSpeed() {
    return this.speechSpeed;
  }

  public Behaviour setSpeechSpeed(int speechSpeed) {
    this.speechSpeed = speechSpeed;
    setSpeechSpeedIsSet(true);
    return this;
  }

  public void unsetSpeechSpeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPEECHSPEED_ISSET_ID);
  }

  /** Returns true if field speechSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeechSpeed() {
    return EncodingUtils.testBit(__isset_bitfield, __SPEECHSPEED_ISSET_ID);
  }

  public void setSpeechSpeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPEECHSPEED_ISSET_ID, value);
  }

  public double getSpeechPitchShift() {
    return this.speechPitchShift;
  }

  public Behaviour setSpeechPitchShift(double speechPitchShift) {
    this.speechPitchShift = speechPitchShift;
    setSpeechPitchShiftIsSet(true);
    return this;
  }

  public void unsetSpeechPitchShift() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPEECHPITCHSHIFT_ISSET_ID);
  }

  /** Returns true if field speechPitchShift is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeechPitchShift() {
    return EncodingUtils.testBit(__isset_bitfield, __SPEECHPITCHSHIFT_ISSET_ID);
  }

  public void setSpeechPitchShiftIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPEECHPITCHSHIFT_ISSET_ID, value);
  }

  public int getSpeechShape() {
    return this.speechShape;
  }

  public Behaviour setSpeechShape(int speechShape) {
    this.speechShape = speechShape;
    setSpeechShapeIsSet(true);
    return this;
  }

  public void unsetSpeechShape() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPEECHSHAPE_ISSET_ID);
  }

  /** Returns true if field speechShape is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeechShape() {
    return EncodingUtils.testBit(__isset_bitfield, __SPEECHSHAPE_ISSET_ID);
  }

  public void setSpeechShapeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPEECHSHAPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case GESTURE:
      if (value == null) {
        unsetGesture();
      } else {
        setGesture((String)value);
      }
      break;

    case TEXT_TO_SPEAK:
      if (value == null) {
        unsetTextToSpeak();
      } else {
        setTextToSpeak((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case MOOD:
      if (value == null) {
        unsetMood();
      } else {
        setMood((Double)value);
      }
      break;

    case SPEECH_SPEED:
      if (value == null) {
        unsetSpeechSpeed();
      } else {
        setSpeechSpeed((Integer)value);
      }
      break;

    case SPEECH_PITCH_SHIFT:
      if (value == null) {
        unsetSpeechPitchShift();
      } else {
        setSpeechPitchShift((Double)value);
      }
      break;

    case SPEECH_SHAPE:
      if (value == null) {
        unsetSpeechShape();
      } else {
        setSpeechShape((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case GESTURE:
      return getGesture();

    case TEXT_TO_SPEAK:
      return getTextToSpeak();

    case TYPE:
      return getType();

    case MOOD:
      return getMood();

    case SPEECH_SPEED:
      return getSpeechSpeed();

    case SPEECH_PITCH_SHIFT:
      return getSpeechPitchShift();

    case SPEECH_SHAPE:
      return getSpeechShape();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case GESTURE:
      return isSetGesture();
    case TEXT_TO_SPEAK:
      return isSetTextToSpeak();
    case TYPE:
      return isSetType();
    case MOOD:
      return isSetMood();
    case SPEECH_SPEED:
      return isSetSpeechSpeed();
    case SPEECH_PITCH_SHIFT:
      return isSetSpeechPitchShift();
    case SPEECH_SHAPE:
      return isSetSpeechShape();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Behaviour)
      return this.equals((Behaviour)that);
    return false;
  }

  public boolean equals(Behaviour that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_gesture = true && this.isSetGesture();
    boolean that_present_gesture = true && that.isSetGesture();
    if (this_present_gesture || that_present_gesture) {
      if (!(this_present_gesture && that_present_gesture))
        return false;
      if (!this.gesture.equals(that.gesture))
        return false;
    }

    boolean this_present_textToSpeak = true && this.isSetTextToSpeak();
    boolean that_present_textToSpeak = true && that.isSetTextToSpeak();
    if (this_present_textToSpeak || that_present_textToSpeak) {
      if (!(this_present_textToSpeak && that_present_textToSpeak))
        return false;
      if (!this.textToSpeak.equals(that.textToSpeak))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_mood = true && this.isSetMood();
    boolean that_present_mood = true && that.isSetMood();
    if (this_present_mood || that_present_mood) {
      if (!(this_present_mood && that_present_mood))
        return false;
      if (this.mood != that.mood)
        return false;
    }

    boolean this_present_speechSpeed = true && this.isSetSpeechSpeed();
    boolean that_present_speechSpeed = true && that.isSetSpeechSpeed();
    if (this_present_speechSpeed || that_present_speechSpeed) {
      if (!(this_present_speechSpeed && that_present_speechSpeed))
        return false;
      if (this.speechSpeed != that.speechSpeed)
        return false;
    }

    boolean this_present_speechPitchShift = true && this.isSetSpeechPitchShift();
    boolean that_present_speechPitchShift = true && that.isSetSpeechPitchShift();
    if (this_present_speechPitchShift || that_present_speechPitchShift) {
      if (!(this_present_speechPitchShift && that_present_speechPitchShift))
        return false;
      if (this.speechPitchShift != that.speechPitchShift)
        return false;
    }

    boolean this_present_speechShape = true && this.isSetSpeechShape();
    boolean that_present_speechShape = true && that.isSetSpeechShape();
    if (this_present_speechShape || that_present_speechShape) {
      if (!(this_present_speechShape && that_present_speechShape))
        return false;
      if (this.speechShape != that.speechShape)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_gesture = true && (isSetGesture());
    list.add(present_gesture);
    if (present_gesture)
      list.add(gesture);

    boolean present_textToSpeak = true && (isSetTextToSpeak());
    list.add(present_textToSpeak);
    if (present_textToSpeak)
      list.add(textToSpeak);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_mood = true && (isSetMood());
    list.add(present_mood);
    if (present_mood)
      list.add(mood);

    boolean present_speechSpeed = true && (isSetSpeechSpeed());
    list.add(present_speechSpeed);
    if (present_speechSpeed)
      list.add(speechSpeed);

    boolean present_speechPitchShift = true && (isSetSpeechPitchShift());
    list.add(present_speechPitchShift);
    if (present_speechPitchShift)
      list.add(speechPitchShift);

    boolean present_speechShape = true && (isSetSpeechShape());
    list.add(present_speechShape);
    if (present_speechShape)
      list.add(speechShape);

    return list.hashCode();
  }

  @Override
  public int compareTo(Behaviour other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGesture()).compareTo(other.isSetGesture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGesture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gesture, other.gesture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTextToSpeak()).compareTo(other.isSetTextToSpeak());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextToSpeak()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textToSpeak, other.textToSpeak);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMood()).compareTo(other.isSetMood());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMood()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mood, other.mood);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeechSpeed()).compareTo(other.isSetSpeechSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeechSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speechSpeed, other.speechSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeechPitchShift()).compareTo(other.isSetSpeechPitchShift());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeechPitchShift()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speechPitchShift, other.speechPitchShift);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeechShape()).compareTo(other.isSetSpeechShape());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeechShape()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speechShape, other.speechShape);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Behaviour(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gesture:");
    if (this.gesture == null) {
      sb.append("null");
    } else {
      sb.append(this.gesture);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("textToSpeak:");
    if (this.textToSpeak == null) {
      sb.append("null");
    } else {
      sb.append(this.textToSpeak);
    }
    first = false;
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetMood()) {
      if (!first) sb.append(", ");
      sb.append("mood:");
      sb.append(this.mood);
      first = false;
    }
    if (isSetSpeechSpeed()) {
      if (!first) sb.append(", ");
      sb.append("speechSpeed:");
      sb.append(this.speechSpeed);
      first = false;
    }
    if (isSetSpeechPitchShift()) {
      if (!first) sb.append(", ");
      sb.append("speechPitchShift:");
      sb.append(this.speechPitchShift);
      first = false;
    }
    if (isSetSpeechShape()) {
      if (!first) sb.append(", ");
      sb.append("speechShape:");
      sb.append(this.speechShape);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (gesture == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'gesture' was not present! Struct: " + toString());
    }
    if (textToSpeak == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'textToSpeak' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BehaviourStandardSchemeFactory implements SchemeFactory {
    public BehaviourStandardScheme getScheme() {
      return new BehaviourStandardScheme();
    }
  }

  private static class BehaviourStandardScheme extends StandardScheme<Behaviour> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Behaviour struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GESTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gesture = iprot.readString();
              struct.setGestureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEXT_TO_SPEAK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.textToSpeak = iprot.readString();
              struct.setTextToSpeakIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MOOD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mood = iprot.readDouble();
              struct.setMoodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SPEECH_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.speechSpeed = iprot.readI32();
              struct.setSpeechSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SPEECH_PITCH_SHIFT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.speechPitchShift = iprot.readDouble();
              struct.setSpeechPitchShiftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SPEECH_SHAPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.speechShape = iprot.readI32();
              struct.setSpeechShapeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Behaviour struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.gesture != null) {
        oprot.writeFieldBegin(GESTURE_FIELD_DESC);
        oprot.writeString(struct.gesture);
        oprot.writeFieldEnd();
      }
      if (struct.textToSpeak != null) {
        oprot.writeFieldBegin(TEXT_TO_SPEAK_FIELD_DESC);
        oprot.writeString(struct.textToSpeak);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMood()) {
        oprot.writeFieldBegin(MOOD_FIELD_DESC);
        oprot.writeDouble(struct.mood);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpeechSpeed()) {
        oprot.writeFieldBegin(SPEECH_SPEED_FIELD_DESC);
        oprot.writeI32(struct.speechSpeed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpeechPitchShift()) {
        oprot.writeFieldBegin(SPEECH_PITCH_SHIFT_FIELD_DESC);
        oprot.writeDouble(struct.speechPitchShift);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpeechShape()) {
        oprot.writeFieldBegin(SPEECH_SHAPE_FIELD_DESC);
        oprot.writeI32(struct.speechShape);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BehaviourTupleSchemeFactory implements SchemeFactory {
    public BehaviourTupleScheme getScheme() {
      return new BehaviourTupleScheme();
    }
  }

  private static class BehaviourTupleScheme extends TupleScheme<Behaviour> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Behaviour struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeString(struct.gesture);
      oprot.writeString(struct.textToSpeak);
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetMood()) {
        optionals.set(1);
      }
      if (struct.isSetSpeechSpeed()) {
        optionals.set(2);
      }
      if (struct.isSetSpeechPitchShift()) {
        optionals.set(3);
      }
      if (struct.isSetSpeechShape()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetMood()) {
        oprot.writeDouble(struct.mood);
      }
      if (struct.isSetSpeechSpeed()) {
        oprot.writeI32(struct.speechSpeed);
      }
      if (struct.isSetSpeechPitchShift()) {
        oprot.writeDouble(struct.speechPitchShift);
      }
      if (struct.isSetSpeechShape()) {
        oprot.writeI32(struct.speechShape);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Behaviour struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.gesture = iprot.readString();
      struct.setGestureIsSet(true);
      struct.textToSpeak = iprot.readString();
      struct.setTextToSpeakIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mood = iprot.readDouble();
        struct.setMoodIsSet(true);
      }
      if (incoming.get(2)) {
        struct.speechSpeed = iprot.readI32();
        struct.setSpeechSpeedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.speechPitchShift = iprot.readDouble();
        struct.setSpeechPitchShiftIsSet(true);
      }
      if (incoming.get(4)) {
        struct.speechShape = iprot.readI32();
        struct.setSpeechShapeIsSet(true);
      }
    }
  }

}

