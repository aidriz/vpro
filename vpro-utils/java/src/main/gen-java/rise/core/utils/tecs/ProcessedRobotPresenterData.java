/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rise.core.utils.tecs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-01")
public class ProcessedRobotPresenterData implements org.apache.thrift.TBase<ProcessedRobotPresenterData, ProcessedRobotPresenterData._Fields>, java.io.Serializable, Cloneable, Comparable<ProcessedRobotPresenterData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProcessedRobotPresenterData");

  private static final org.apache.thrift.protocol.TField STRUCTURE_PREPOSITIONAL_PHRASES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("structure_prepositional_phrases_count", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STRUCTURE_ADJECTIVE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("structure_adjective_count", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STRUCTURE_NON_FUTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("structure_non_future", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STRUCTURE_ACTIVE_SENTENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("structure_active_sentences", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STRUCTURE_PERSONAL_PRONOUNS_FIELD_DESC = new org.apache.thrift.protocol.TField("structure_personal_pronouns", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STRUCTURE_WORD_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("structure_word_length", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField STRUCTURE_NEGATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("structure_negations", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField STRUCTURE_ADVERBS_FIELD_DESC = new org.apache.thrift.protocol.TField("structure_adverbs", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField STRUCTURE_PASSIVE_SENTENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("structure_passive_sentences", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField STRUCTURE_NUMBER_OF_SENTENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("structure_number_of_sentences", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField STRUCTURE_FUTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("structure_future", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField STRUCTURE_WORDCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("structure_wordcount", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField METADATA_SPEAKER_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata_speaker", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField METADATA_LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata_lang", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField METADATA_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata_timestamp", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField METADATA_INPUT_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata_input_text", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField METADATA_CONFIDENCE_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata_confidence_score", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField METADATA_OTHER_POSSIBLE_RESPONSES_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata_other_possible_responses", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField METADATA_PEOPLE_PRESENT_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata_people_present", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField METADATA_SCRIPT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata_script_id", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField METADATA_LOCATION_GEOMETRY_COORDINATES_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata_location_geometry_coordinates", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField METADATA_LOCATION_GEOMETRY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata_location_geometry_type", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField METADATA_LOCATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata_location_type", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField METADATA_LOCATION_PROPERTIES_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata_location_properties_name", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField METADATA_SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata_scene_id", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField SEMANTIC_KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("semantic_keywords", org.apache.thrift.protocol.TType.LIST, (short)26);
  private static final org.apache.thrift.protocol.TField SEMANTIC_ORGANISATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("semantic_organisations", org.apache.thrift.protocol.TType.LIST, (short)27);
  private static final org.apache.thrift.protocol.TField SEMANTIC_PEOPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("semantic_people", org.apache.thrift.protocol.TType.LIST, (short)28);
  private static final org.apache.thrift.protocol.TField SEMANTIC_PLACES_FIELD_DESC = new org.apache.thrift.protocol.TField("semantic_places", org.apache.thrift.protocol.TType.LIST, (short)29);
  private static final org.apache.thrift.protocol.TField SEMANTIC_TOPICS_FIELD_DESC = new org.apache.thrift.protocol.TField("semantic_topics", org.apache.thrift.protocol.TType.LIST, (short)30);
  private static final org.apache.thrift.protocol.TField EMOTIONS_DETECTED_EMOTION_FIELD_DESC = new org.apache.thrift.protocol.TField("emotions_detected_emotion", org.apache.thrift.protocol.TType.LIST, (short)31);
  private static final org.apache.thrift.protocol.TField EMOTIONS_INFORMATION_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("emotions_information_state", org.apache.thrift.protocol.TType.LIST, (short)32);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProcessedRobotPresenterDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProcessedRobotPresenterDataTupleSchemeFactory());
  }

  public int structure_prepositional_phrases_count; // required
  public int structure_adjective_count; // required
  public int structure_non_future; // required
  public int structure_active_sentences; // required
  public int structure_personal_pronouns; // required
  public int structure_word_length; // required
  public int structure_negations; // required
  public int structure_adverbs; // required
  public int structure_passive_sentences; // required
  public int structure_number_of_sentences; // required
  public int structure_future; // required
  public int structure_wordcount; // required
  public String metadata_speaker; // required
  public String metadata_lang; // required
  public String metadata_timestamp; // required
  public String metadata_input_text; // required
  public String metadata_confidence_score; // required
  public List<String> metadata_other_possible_responses; // required
  public List<String> metadata_people_present; // required
  public String metadata_script_id; // required
  public List<Double> metadata_location_geometry_coordinates; // required
  public String metadata_location_geometry_type; // required
  public String metadata_location_type; // required
  public List<String> metadata_location_properties_name; // required
  public String metadata_scene_id; // required
  public List<String> semantic_keywords; // required
  public List<String> semantic_organisations; // required
  public List<String> semantic_people; // required
  public List<String> semantic_places; // required
  public List<String> semantic_topics; // required
  public List<String> emotions_detected_emotion; // required
  public List<String> emotions_information_state; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STRUCTURE_PREPOSITIONAL_PHRASES_COUNT((short)1, "structure_prepositional_phrases_count"),
    STRUCTURE_ADJECTIVE_COUNT((short)2, "structure_adjective_count"),
    STRUCTURE_NON_FUTURE((short)3, "structure_non_future"),
    STRUCTURE_ACTIVE_SENTENCES((short)4, "structure_active_sentences"),
    STRUCTURE_PERSONAL_PRONOUNS((short)5, "structure_personal_pronouns"),
    STRUCTURE_WORD_LENGTH((short)6, "structure_word_length"),
    STRUCTURE_NEGATIONS((short)7, "structure_negations"),
    STRUCTURE_ADVERBS((short)8, "structure_adverbs"),
    STRUCTURE_PASSIVE_SENTENCES((short)9, "structure_passive_sentences"),
    STRUCTURE_NUMBER_OF_SENTENCES((short)10, "structure_number_of_sentences"),
    STRUCTURE_FUTURE((short)11, "structure_future"),
    STRUCTURE_WORDCOUNT((short)12, "structure_wordcount"),
    METADATA_SPEAKER((short)13, "metadata_speaker"),
    METADATA_LANG((short)14, "metadata_lang"),
    METADATA_TIMESTAMP((short)15, "metadata_timestamp"),
    METADATA_INPUT_TEXT((short)16, "metadata_input_text"),
    METADATA_CONFIDENCE_SCORE((short)17, "metadata_confidence_score"),
    METADATA_OTHER_POSSIBLE_RESPONSES((short)18, "metadata_other_possible_responses"),
    METADATA_PEOPLE_PRESENT((short)19, "metadata_people_present"),
    METADATA_SCRIPT_ID((short)20, "metadata_script_id"),
    METADATA_LOCATION_GEOMETRY_COORDINATES((short)21, "metadata_location_geometry_coordinates"),
    METADATA_LOCATION_GEOMETRY_TYPE((short)22, "metadata_location_geometry_type"),
    METADATA_LOCATION_TYPE((short)23, "metadata_location_type"),
    METADATA_LOCATION_PROPERTIES_NAME((short)24, "metadata_location_properties_name"),
    METADATA_SCENE_ID((short)25, "metadata_scene_id"),
    SEMANTIC_KEYWORDS((short)26, "semantic_keywords"),
    SEMANTIC_ORGANISATIONS((short)27, "semantic_organisations"),
    SEMANTIC_PEOPLE((short)28, "semantic_people"),
    SEMANTIC_PLACES((short)29, "semantic_places"),
    SEMANTIC_TOPICS((short)30, "semantic_topics"),
    EMOTIONS_DETECTED_EMOTION((short)31, "emotions_detected_emotion"),
    EMOTIONS_INFORMATION_STATE((short)32, "emotions_information_state");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRUCTURE_PREPOSITIONAL_PHRASES_COUNT
          return STRUCTURE_PREPOSITIONAL_PHRASES_COUNT;
        case 2: // STRUCTURE_ADJECTIVE_COUNT
          return STRUCTURE_ADJECTIVE_COUNT;
        case 3: // STRUCTURE_NON_FUTURE
          return STRUCTURE_NON_FUTURE;
        case 4: // STRUCTURE_ACTIVE_SENTENCES
          return STRUCTURE_ACTIVE_SENTENCES;
        case 5: // STRUCTURE_PERSONAL_PRONOUNS
          return STRUCTURE_PERSONAL_PRONOUNS;
        case 6: // STRUCTURE_WORD_LENGTH
          return STRUCTURE_WORD_LENGTH;
        case 7: // STRUCTURE_NEGATIONS
          return STRUCTURE_NEGATIONS;
        case 8: // STRUCTURE_ADVERBS
          return STRUCTURE_ADVERBS;
        case 9: // STRUCTURE_PASSIVE_SENTENCES
          return STRUCTURE_PASSIVE_SENTENCES;
        case 10: // STRUCTURE_NUMBER_OF_SENTENCES
          return STRUCTURE_NUMBER_OF_SENTENCES;
        case 11: // STRUCTURE_FUTURE
          return STRUCTURE_FUTURE;
        case 12: // STRUCTURE_WORDCOUNT
          return STRUCTURE_WORDCOUNT;
        case 13: // METADATA_SPEAKER
          return METADATA_SPEAKER;
        case 14: // METADATA_LANG
          return METADATA_LANG;
        case 15: // METADATA_TIMESTAMP
          return METADATA_TIMESTAMP;
        case 16: // METADATA_INPUT_TEXT
          return METADATA_INPUT_TEXT;
        case 17: // METADATA_CONFIDENCE_SCORE
          return METADATA_CONFIDENCE_SCORE;
        case 18: // METADATA_OTHER_POSSIBLE_RESPONSES
          return METADATA_OTHER_POSSIBLE_RESPONSES;
        case 19: // METADATA_PEOPLE_PRESENT
          return METADATA_PEOPLE_PRESENT;
        case 20: // METADATA_SCRIPT_ID
          return METADATA_SCRIPT_ID;
        case 21: // METADATA_LOCATION_GEOMETRY_COORDINATES
          return METADATA_LOCATION_GEOMETRY_COORDINATES;
        case 22: // METADATA_LOCATION_GEOMETRY_TYPE
          return METADATA_LOCATION_GEOMETRY_TYPE;
        case 23: // METADATA_LOCATION_TYPE
          return METADATA_LOCATION_TYPE;
        case 24: // METADATA_LOCATION_PROPERTIES_NAME
          return METADATA_LOCATION_PROPERTIES_NAME;
        case 25: // METADATA_SCENE_ID
          return METADATA_SCENE_ID;
        case 26: // SEMANTIC_KEYWORDS
          return SEMANTIC_KEYWORDS;
        case 27: // SEMANTIC_ORGANISATIONS
          return SEMANTIC_ORGANISATIONS;
        case 28: // SEMANTIC_PEOPLE
          return SEMANTIC_PEOPLE;
        case 29: // SEMANTIC_PLACES
          return SEMANTIC_PLACES;
        case 30: // SEMANTIC_TOPICS
          return SEMANTIC_TOPICS;
        case 31: // EMOTIONS_DETECTED_EMOTION
          return EMOTIONS_DETECTED_EMOTION;
        case 32: // EMOTIONS_INFORMATION_STATE
          return EMOTIONS_INFORMATION_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STRUCTURE_PREPOSITIONAL_PHRASES_COUNT_ISSET_ID = 0;
  private static final int __STRUCTURE_ADJECTIVE_COUNT_ISSET_ID = 1;
  private static final int __STRUCTURE_NON_FUTURE_ISSET_ID = 2;
  private static final int __STRUCTURE_ACTIVE_SENTENCES_ISSET_ID = 3;
  private static final int __STRUCTURE_PERSONAL_PRONOUNS_ISSET_ID = 4;
  private static final int __STRUCTURE_WORD_LENGTH_ISSET_ID = 5;
  private static final int __STRUCTURE_NEGATIONS_ISSET_ID = 6;
  private static final int __STRUCTURE_ADVERBS_ISSET_ID = 7;
  private static final int __STRUCTURE_PASSIVE_SENTENCES_ISSET_ID = 8;
  private static final int __STRUCTURE_NUMBER_OF_SENTENCES_ISSET_ID = 9;
  private static final int __STRUCTURE_FUTURE_ISSET_ID = 10;
  private static final int __STRUCTURE_WORDCOUNT_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRUCTURE_PREPOSITIONAL_PHRASES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("structure_prepositional_phrases_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRUCTURE_ADJECTIVE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("structure_adjective_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRUCTURE_NON_FUTURE, new org.apache.thrift.meta_data.FieldMetaData("structure_non_future", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRUCTURE_ACTIVE_SENTENCES, new org.apache.thrift.meta_data.FieldMetaData("structure_active_sentences", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRUCTURE_PERSONAL_PRONOUNS, new org.apache.thrift.meta_data.FieldMetaData("structure_personal_pronouns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRUCTURE_WORD_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("structure_word_length", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRUCTURE_NEGATIONS, new org.apache.thrift.meta_data.FieldMetaData("structure_negations", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRUCTURE_ADVERBS, new org.apache.thrift.meta_data.FieldMetaData("structure_adverbs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRUCTURE_PASSIVE_SENTENCES, new org.apache.thrift.meta_data.FieldMetaData("structure_passive_sentences", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRUCTURE_NUMBER_OF_SENTENCES, new org.apache.thrift.meta_data.FieldMetaData("structure_number_of_sentences", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRUCTURE_FUTURE, new org.apache.thrift.meta_data.FieldMetaData("structure_future", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRUCTURE_WORDCOUNT, new org.apache.thrift.meta_data.FieldMetaData("structure_wordcount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.METADATA_SPEAKER, new org.apache.thrift.meta_data.FieldMetaData("metadata_speaker", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METADATA_LANG, new org.apache.thrift.meta_data.FieldMetaData("metadata_lang", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METADATA_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("metadata_timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METADATA_INPUT_TEXT, new org.apache.thrift.meta_data.FieldMetaData("metadata_input_text", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METADATA_CONFIDENCE_SCORE, new org.apache.thrift.meta_data.FieldMetaData("metadata_confidence_score", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METADATA_OTHER_POSSIBLE_RESPONSES, new org.apache.thrift.meta_data.FieldMetaData("metadata_other_possible_responses", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.METADATA_PEOPLE_PRESENT, new org.apache.thrift.meta_data.FieldMetaData("metadata_people_present", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.METADATA_SCRIPT_ID, new org.apache.thrift.meta_data.FieldMetaData("metadata_script_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METADATA_LOCATION_GEOMETRY_COORDINATES, new org.apache.thrift.meta_data.FieldMetaData("metadata_location_geometry_coordinates", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.METADATA_LOCATION_GEOMETRY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("metadata_location_geometry_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METADATA_LOCATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("metadata_location_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METADATA_LOCATION_PROPERTIES_NAME, new org.apache.thrift.meta_data.FieldMetaData("metadata_location_properties_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.METADATA_SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("metadata_scene_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEMANTIC_KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("semantic_keywords", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SEMANTIC_ORGANISATIONS, new org.apache.thrift.meta_data.FieldMetaData("semantic_organisations", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SEMANTIC_PEOPLE, new org.apache.thrift.meta_data.FieldMetaData("semantic_people", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SEMANTIC_PLACES, new org.apache.thrift.meta_data.FieldMetaData("semantic_places", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SEMANTIC_TOPICS, new org.apache.thrift.meta_data.FieldMetaData("semantic_topics", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EMOTIONS_DETECTED_EMOTION, new org.apache.thrift.meta_data.FieldMetaData("emotions_detected_emotion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EMOTIONS_INFORMATION_STATE, new org.apache.thrift.meta_data.FieldMetaData("emotions_information_state", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProcessedRobotPresenterData.class, metaDataMap);
  }

  public ProcessedRobotPresenterData() {
  }

  public ProcessedRobotPresenterData(
    int structure_prepositional_phrases_count,
    int structure_adjective_count,
    int structure_non_future,
    int structure_active_sentences,
    int structure_personal_pronouns,
    int structure_word_length,
    int structure_negations,
    int structure_adverbs,
    int structure_passive_sentences,
    int structure_number_of_sentences,
    int structure_future,
    int structure_wordcount,
    String metadata_speaker,
    String metadata_lang,
    String metadata_timestamp,
    String metadata_input_text,
    String metadata_confidence_score,
    List<String> metadata_other_possible_responses,
    List<String> metadata_people_present,
    String metadata_script_id,
    List<Double> metadata_location_geometry_coordinates,
    String metadata_location_geometry_type,
    String metadata_location_type,
    List<String> metadata_location_properties_name,
    String metadata_scene_id,
    List<String> semantic_keywords,
    List<String> semantic_organisations,
    List<String> semantic_people,
    List<String> semantic_places,
    List<String> semantic_topics,
    List<String> emotions_detected_emotion,
    List<String> emotions_information_state)
  {
    this();
    this.structure_prepositional_phrases_count = structure_prepositional_phrases_count;
    setStructure_prepositional_phrases_countIsSet(true);
    this.structure_adjective_count = structure_adjective_count;
    setStructure_adjective_countIsSet(true);
    this.structure_non_future = structure_non_future;
    setStructure_non_futureIsSet(true);
    this.structure_active_sentences = structure_active_sentences;
    setStructure_active_sentencesIsSet(true);
    this.structure_personal_pronouns = structure_personal_pronouns;
    setStructure_personal_pronounsIsSet(true);
    this.structure_word_length = structure_word_length;
    setStructure_word_lengthIsSet(true);
    this.structure_negations = structure_negations;
    setStructure_negationsIsSet(true);
    this.structure_adverbs = structure_adverbs;
    setStructure_adverbsIsSet(true);
    this.structure_passive_sentences = structure_passive_sentences;
    setStructure_passive_sentencesIsSet(true);
    this.structure_number_of_sentences = structure_number_of_sentences;
    setStructure_number_of_sentencesIsSet(true);
    this.structure_future = structure_future;
    setStructure_futureIsSet(true);
    this.structure_wordcount = structure_wordcount;
    setStructure_wordcountIsSet(true);
    this.metadata_speaker = metadata_speaker;
    this.metadata_lang = metadata_lang;
    this.metadata_timestamp = metadata_timestamp;
    this.metadata_input_text = metadata_input_text;
    this.metadata_confidence_score = metadata_confidence_score;
    this.metadata_other_possible_responses = metadata_other_possible_responses;
    this.metadata_people_present = metadata_people_present;
    this.metadata_script_id = metadata_script_id;
    this.metadata_location_geometry_coordinates = metadata_location_geometry_coordinates;
    this.metadata_location_geometry_type = metadata_location_geometry_type;
    this.metadata_location_type = metadata_location_type;
    this.metadata_location_properties_name = metadata_location_properties_name;
    this.metadata_scene_id = metadata_scene_id;
    this.semantic_keywords = semantic_keywords;
    this.semantic_organisations = semantic_organisations;
    this.semantic_people = semantic_people;
    this.semantic_places = semantic_places;
    this.semantic_topics = semantic_topics;
    this.emotions_detected_emotion = emotions_detected_emotion;
    this.emotions_information_state = emotions_information_state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProcessedRobotPresenterData(ProcessedRobotPresenterData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.structure_prepositional_phrases_count = other.structure_prepositional_phrases_count;
    this.structure_adjective_count = other.structure_adjective_count;
    this.structure_non_future = other.structure_non_future;
    this.structure_active_sentences = other.structure_active_sentences;
    this.structure_personal_pronouns = other.structure_personal_pronouns;
    this.structure_word_length = other.structure_word_length;
    this.structure_negations = other.structure_negations;
    this.structure_adverbs = other.structure_adverbs;
    this.structure_passive_sentences = other.structure_passive_sentences;
    this.structure_number_of_sentences = other.structure_number_of_sentences;
    this.structure_future = other.structure_future;
    this.structure_wordcount = other.structure_wordcount;
    if (other.isSetMetadata_speaker()) {
      this.metadata_speaker = other.metadata_speaker;
    }
    if (other.isSetMetadata_lang()) {
      this.metadata_lang = other.metadata_lang;
    }
    if (other.isSetMetadata_timestamp()) {
      this.metadata_timestamp = other.metadata_timestamp;
    }
    if (other.isSetMetadata_input_text()) {
      this.metadata_input_text = other.metadata_input_text;
    }
    if (other.isSetMetadata_confidence_score()) {
      this.metadata_confidence_score = other.metadata_confidence_score;
    }
    if (other.isSetMetadata_other_possible_responses()) {
      List<String> __this__metadata_other_possible_responses = new ArrayList<String>(other.metadata_other_possible_responses);
      this.metadata_other_possible_responses = __this__metadata_other_possible_responses;
    }
    if (other.isSetMetadata_people_present()) {
      List<String> __this__metadata_people_present = new ArrayList<String>(other.metadata_people_present);
      this.metadata_people_present = __this__metadata_people_present;
    }
    if (other.isSetMetadata_script_id()) {
      this.metadata_script_id = other.metadata_script_id;
    }
    if (other.isSetMetadata_location_geometry_coordinates()) {
      List<Double> __this__metadata_location_geometry_coordinates = new ArrayList<Double>(other.metadata_location_geometry_coordinates);
      this.metadata_location_geometry_coordinates = __this__metadata_location_geometry_coordinates;
    }
    if (other.isSetMetadata_location_geometry_type()) {
      this.metadata_location_geometry_type = other.metadata_location_geometry_type;
    }
    if (other.isSetMetadata_location_type()) {
      this.metadata_location_type = other.metadata_location_type;
    }
    if (other.isSetMetadata_location_properties_name()) {
      List<String> __this__metadata_location_properties_name = new ArrayList<String>(other.metadata_location_properties_name);
      this.metadata_location_properties_name = __this__metadata_location_properties_name;
    }
    if (other.isSetMetadata_scene_id()) {
      this.metadata_scene_id = other.metadata_scene_id;
    }
    if (other.isSetSemantic_keywords()) {
      List<String> __this__semantic_keywords = new ArrayList<String>(other.semantic_keywords);
      this.semantic_keywords = __this__semantic_keywords;
    }
    if (other.isSetSemantic_organisations()) {
      List<String> __this__semantic_organisations = new ArrayList<String>(other.semantic_organisations);
      this.semantic_organisations = __this__semantic_organisations;
    }
    if (other.isSetSemantic_people()) {
      List<String> __this__semantic_people = new ArrayList<String>(other.semantic_people);
      this.semantic_people = __this__semantic_people;
    }
    if (other.isSetSemantic_places()) {
      List<String> __this__semantic_places = new ArrayList<String>(other.semantic_places);
      this.semantic_places = __this__semantic_places;
    }
    if (other.isSetSemantic_topics()) {
      List<String> __this__semantic_topics = new ArrayList<String>(other.semantic_topics);
      this.semantic_topics = __this__semantic_topics;
    }
    if (other.isSetEmotions_detected_emotion()) {
      List<String> __this__emotions_detected_emotion = new ArrayList<String>(other.emotions_detected_emotion);
      this.emotions_detected_emotion = __this__emotions_detected_emotion;
    }
    if (other.isSetEmotions_information_state()) {
      List<String> __this__emotions_information_state = new ArrayList<String>(other.emotions_information_state);
      this.emotions_information_state = __this__emotions_information_state;
    }
  }

  public ProcessedRobotPresenterData deepCopy() {
    return new ProcessedRobotPresenterData(this);
  }

  @Override
  public void clear() {
    setStructure_prepositional_phrases_countIsSet(false);
    this.structure_prepositional_phrases_count = 0;
    setStructure_adjective_countIsSet(false);
    this.structure_adjective_count = 0;
    setStructure_non_futureIsSet(false);
    this.structure_non_future = 0;
    setStructure_active_sentencesIsSet(false);
    this.structure_active_sentences = 0;
    setStructure_personal_pronounsIsSet(false);
    this.structure_personal_pronouns = 0;
    setStructure_word_lengthIsSet(false);
    this.structure_word_length = 0;
    setStructure_negationsIsSet(false);
    this.structure_negations = 0;
    setStructure_adverbsIsSet(false);
    this.structure_adverbs = 0;
    setStructure_passive_sentencesIsSet(false);
    this.structure_passive_sentences = 0;
    setStructure_number_of_sentencesIsSet(false);
    this.structure_number_of_sentences = 0;
    setStructure_futureIsSet(false);
    this.structure_future = 0;
    setStructure_wordcountIsSet(false);
    this.structure_wordcount = 0;
    this.metadata_speaker = null;
    this.metadata_lang = null;
    this.metadata_timestamp = null;
    this.metadata_input_text = null;
    this.metadata_confidence_score = null;
    this.metadata_other_possible_responses = null;
    this.metadata_people_present = null;
    this.metadata_script_id = null;
    this.metadata_location_geometry_coordinates = null;
    this.metadata_location_geometry_type = null;
    this.metadata_location_type = null;
    this.metadata_location_properties_name = null;
    this.metadata_scene_id = null;
    this.semantic_keywords = null;
    this.semantic_organisations = null;
    this.semantic_people = null;
    this.semantic_places = null;
    this.semantic_topics = null;
    this.emotions_detected_emotion = null;
    this.emotions_information_state = null;
  }

  public int getStructure_prepositional_phrases_count() {
    return this.structure_prepositional_phrases_count;
  }

  public ProcessedRobotPresenterData setStructure_prepositional_phrases_count(int structure_prepositional_phrases_count) {
    this.structure_prepositional_phrases_count = structure_prepositional_phrases_count;
    setStructure_prepositional_phrases_countIsSet(true);
    return this;
  }

  public void unsetStructure_prepositional_phrases_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRUCTURE_PREPOSITIONAL_PHRASES_COUNT_ISSET_ID);
  }

  /** Returns true if field structure_prepositional_phrases_count is set (has been assigned a value) and false otherwise */
  public boolean isSetStructure_prepositional_phrases_count() {
    return EncodingUtils.testBit(__isset_bitfield, __STRUCTURE_PREPOSITIONAL_PHRASES_COUNT_ISSET_ID);
  }

  public void setStructure_prepositional_phrases_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRUCTURE_PREPOSITIONAL_PHRASES_COUNT_ISSET_ID, value);
  }

  public int getStructure_adjective_count() {
    return this.structure_adjective_count;
  }

  public ProcessedRobotPresenterData setStructure_adjective_count(int structure_adjective_count) {
    this.structure_adjective_count = structure_adjective_count;
    setStructure_adjective_countIsSet(true);
    return this;
  }

  public void unsetStructure_adjective_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRUCTURE_ADJECTIVE_COUNT_ISSET_ID);
  }

  /** Returns true if field structure_adjective_count is set (has been assigned a value) and false otherwise */
  public boolean isSetStructure_adjective_count() {
    return EncodingUtils.testBit(__isset_bitfield, __STRUCTURE_ADJECTIVE_COUNT_ISSET_ID);
  }

  public void setStructure_adjective_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRUCTURE_ADJECTIVE_COUNT_ISSET_ID, value);
  }

  public int getStructure_non_future() {
    return this.structure_non_future;
  }

  public ProcessedRobotPresenterData setStructure_non_future(int structure_non_future) {
    this.structure_non_future = structure_non_future;
    setStructure_non_futureIsSet(true);
    return this;
  }

  public void unsetStructure_non_future() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRUCTURE_NON_FUTURE_ISSET_ID);
  }

  /** Returns true if field structure_non_future is set (has been assigned a value) and false otherwise */
  public boolean isSetStructure_non_future() {
    return EncodingUtils.testBit(__isset_bitfield, __STRUCTURE_NON_FUTURE_ISSET_ID);
  }

  public void setStructure_non_futureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRUCTURE_NON_FUTURE_ISSET_ID, value);
  }

  public int getStructure_active_sentences() {
    return this.structure_active_sentences;
  }

  public ProcessedRobotPresenterData setStructure_active_sentences(int structure_active_sentences) {
    this.structure_active_sentences = structure_active_sentences;
    setStructure_active_sentencesIsSet(true);
    return this;
  }

  public void unsetStructure_active_sentences() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRUCTURE_ACTIVE_SENTENCES_ISSET_ID);
  }

  /** Returns true if field structure_active_sentences is set (has been assigned a value) and false otherwise */
  public boolean isSetStructure_active_sentences() {
    return EncodingUtils.testBit(__isset_bitfield, __STRUCTURE_ACTIVE_SENTENCES_ISSET_ID);
  }

  public void setStructure_active_sentencesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRUCTURE_ACTIVE_SENTENCES_ISSET_ID, value);
  }

  public int getStructure_personal_pronouns() {
    return this.structure_personal_pronouns;
  }

  public ProcessedRobotPresenterData setStructure_personal_pronouns(int structure_personal_pronouns) {
    this.structure_personal_pronouns = structure_personal_pronouns;
    setStructure_personal_pronounsIsSet(true);
    return this;
  }

  public void unsetStructure_personal_pronouns() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRUCTURE_PERSONAL_PRONOUNS_ISSET_ID);
  }

  /** Returns true if field structure_personal_pronouns is set (has been assigned a value) and false otherwise */
  public boolean isSetStructure_personal_pronouns() {
    return EncodingUtils.testBit(__isset_bitfield, __STRUCTURE_PERSONAL_PRONOUNS_ISSET_ID);
  }

  public void setStructure_personal_pronounsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRUCTURE_PERSONAL_PRONOUNS_ISSET_ID, value);
  }

  public int getStructure_word_length() {
    return this.structure_word_length;
  }

  public ProcessedRobotPresenterData setStructure_word_length(int structure_word_length) {
    this.structure_word_length = structure_word_length;
    setStructure_word_lengthIsSet(true);
    return this;
  }

  public void unsetStructure_word_length() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRUCTURE_WORD_LENGTH_ISSET_ID);
  }

  /** Returns true if field structure_word_length is set (has been assigned a value) and false otherwise */
  public boolean isSetStructure_word_length() {
    return EncodingUtils.testBit(__isset_bitfield, __STRUCTURE_WORD_LENGTH_ISSET_ID);
  }

  public void setStructure_word_lengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRUCTURE_WORD_LENGTH_ISSET_ID, value);
  }

  public int getStructure_negations() {
    return this.structure_negations;
  }

  public ProcessedRobotPresenterData setStructure_negations(int structure_negations) {
    this.structure_negations = structure_negations;
    setStructure_negationsIsSet(true);
    return this;
  }

  public void unsetStructure_negations() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRUCTURE_NEGATIONS_ISSET_ID);
  }

  /** Returns true if field structure_negations is set (has been assigned a value) and false otherwise */
  public boolean isSetStructure_negations() {
    return EncodingUtils.testBit(__isset_bitfield, __STRUCTURE_NEGATIONS_ISSET_ID);
  }

  public void setStructure_negationsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRUCTURE_NEGATIONS_ISSET_ID, value);
  }

  public int getStructure_adverbs() {
    return this.structure_adverbs;
  }

  public ProcessedRobotPresenterData setStructure_adverbs(int structure_adverbs) {
    this.structure_adverbs = structure_adverbs;
    setStructure_adverbsIsSet(true);
    return this;
  }

  public void unsetStructure_adverbs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRUCTURE_ADVERBS_ISSET_ID);
  }

  /** Returns true if field structure_adverbs is set (has been assigned a value) and false otherwise */
  public boolean isSetStructure_adverbs() {
    return EncodingUtils.testBit(__isset_bitfield, __STRUCTURE_ADVERBS_ISSET_ID);
  }

  public void setStructure_adverbsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRUCTURE_ADVERBS_ISSET_ID, value);
  }

  public int getStructure_passive_sentences() {
    return this.structure_passive_sentences;
  }

  public ProcessedRobotPresenterData setStructure_passive_sentences(int structure_passive_sentences) {
    this.structure_passive_sentences = structure_passive_sentences;
    setStructure_passive_sentencesIsSet(true);
    return this;
  }

  public void unsetStructure_passive_sentences() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRUCTURE_PASSIVE_SENTENCES_ISSET_ID);
  }

  /** Returns true if field structure_passive_sentences is set (has been assigned a value) and false otherwise */
  public boolean isSetStructure_passive_sentences() {
    return EncodingUtils.testBit(__isset_bitfield, __STRUCTURE_PASSIVE_SENTENCES_ISSET_ID);
  }

  public void setStructure_passive_sentencesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRUCTURE_PASSIVE_SENTENCES_ISSET_ID, value);
  }

  public int getStructure_number_of_sentences() {
    return this.structure_number_of_sentences;
  }

  public ProcessedRobotPresenterData setStructure_number_of_sentences(int structure_number_of_sentences) {
    this.structure_number_of_sentences = structure_number_of_sentences;
    setStructure_number_of_sentencesIsSet(true);
    return this;
  }

  public void unsetStructure_number_of_sentences() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRUCTURE_NUMBER_OF_SENTENCES_ISSET_ID);
  }

  /** Returns true if field structure_number_of_sentences is set (has been assigned a value) and false otherwise */
  public boolean isSetStructure_number_of_sentences() {
    return EncodingUtils.testBit(__isset_bitfield, __STRUCTURE_NUMBER_OF_SENTENCES_ISSET_ID);
  }

  public void setStructure_number_of_sentencesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRUCTURE_NUMBER_OF_SENTENCES_ISSET_ID, value);
  }

  public int getStructure_future() {
    return this.structure_future;
  }

  public ProcessedRobotPresenterData setStructure_future(int structure_future) {
    this.structure_future = structure_future;
    setStructure_futureIsSet(true);
    return this;
  }

  public void unsetStructure_future() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRUCTURE_FUTURE_ISSET_ID);
  }

  /** Returns true if field structure_future is set (has been assigned a value) and false otherwise */
  public boolean isSetStructure_future() {
    return EncodingUtils.testBit(__isset_bitfield, __STRUCTURE_FUTURE_ISSET_ID);
  }

  public void setStructure_futureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRUCTURE_FUTURE_ISSET_ID, value);
  }

  public int getStructure_wordcount() {
    return this.structure_wordcount;
  }

  public ProcessedRobotPresenterData setStructure_wordcount(int structure_wordcount) {
    this.structure_wordcount = structure_wordcount;
    setStructure_wordcountIsSet(true);
    return this;
  }

  public void unsetStructure_wordcount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRUCTURE_WORDCOUNT_ISSET_ID);
  }

  /** Returns true if field structure_wordcount is set (has been assigned a value) and false otherwise */
  public boolean isSetStructure_wordcount() {
    return EncodingUtils.testBit(__isset_bitfield, __STRUCTURE_WORDCOUNT_ISSET_ID);
  }

  public void setStructure_wordcountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRUCTURE_WORDCOUNT_ISSET_ID, value);
  }

  public String getMetadata_speaker() {
    return this.metadata_speaker;
  }

  public ProcessedRobotPresenterData setMetadata_speaker(String metadata_speaker) {
    this.metadata_speaker = metadata_speaker;
    return this;
  }

  public void unsetMetadata_speaker() {
    this.metadata_speaker = null;
  }

  /** Returns true if field metadata_speaker is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata_speaker() {
    return this.metadata_speaker != null;
  }

  public void setMetadata_speakerIsSet(boolean value) {
    if (!value) {
      this.metadata_speaker = null;
    }
  }

  public String getMetadata_lang() {
    return this.metadata_lang;
  }

  public ProcessedRobotPresenterData setMetadata_lang(String metadata_lang) {
    this.metadata_lang = metadata_lang;
    return this;
  }

  public void unsetMetadata_lang() {
    this.metadata_lang = null;
  }

  /** Returns true if field metadata_lang is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata_lang() {
    return this.metadata_lang != null;
  }

  public void setMetadata_langIsSet(boolean value) {
    if (!value) {
      this.metadata_lang = null;
    }
  }

  public String getMetadata_timestamp() {
    return this.metadata_timestamp;
  }

  public ProcessedRobotPresenterData setMetadata_timestamp(String metadata_timestamp) {
    this.metadata_timestamp = metadata_timestamp;
    return this;
  }

  public void unsetMetadata_timestamp() {
    this.metadata_timestamp = null;
  }

  /** Returns true if field metadata_timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata_timestamp() {
    return this.metadata_timestamp != null;
  }

  public void setMetadata_timestampIsSet(boolean value) {
    if (!value) {
      this.metadata_timestamp = null;
    }
  }

  public String getMetadata_input_text() {
    return this.metadata_input_text;
  }

  public ProcessedRobotPresenterData setMetadata_input_text(String metadata_input_text) {
    this.metadata_input_text = metadata_input_text;
    return this;
  }

  public void unsetMetadata_input_text() {
    this.metadata_input_text = null;
  }

  /** Returns true if field metadata_input_text is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata_input_text() {
    return this.metadata_input_text != null;
  }

  public void setMetadata_input_textIsSet(boolean value) {
    if (!value) {
      this.metadata_input_text = null;
    }
  }

  public String getMetadata_confidence_score() {
    return this.metadata_confidence_score;
  }

  public ProcessedRobotPresenterData setMetadata_confidence_score(String metadata_confidence_score) {
    this.metadata_confidence_score = metadata_confidence_score;
    return this;
  }

  public void unsetMetadata_confidence_score() {
    this.metadata_confidence_score = null;
  }

  /** Returns true if field metadata_confidence_score is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata_confidence_score() {
    return this.metadata_confidence_score != null;
  }

  public void setMetadata_confidence_scoreIsSet(boolean value) {
    if (!value) {
      this.metadata_confidence_score = null;
    }
  }

  public int getMetadata_other_possible_responsesSize() {
    return (this.metadata_other_possible_responses == null) ? 0 : this.metadata_other_possible_responses.size();
  }

  public java.util.Iterator<String> getMetadata_other_possible_responsesIterator() {
    return (this.metadata_other_possible_responses == null) ? null : this.metadata_other_possible_responses.iterator();
  }

  public void addToMetadata_other_possible_responses(String elem) {
    if (this.metadata_other_possible_responses == null) {
      this.metadata_other_possible_responses = new ArrayList<String>();
    }
    this.metadata_other_possible_responses.add(elem);
  }

  public List<String> getMetadata_other_possible_responses() {
    return this.metadata_other_possible_responses;
  }

  public ProcessedRobotPresenterData setMetadata_other_possible_responses(List<String> metadata_other_possible_responses) {
    this.metadata_other_possible_responses = metadata_other_possible_responses;
    return this;
  }

  public void unsetMetadata_other_possible_responses() {
    this.metadata_other_possible_responses = null;
  }

  /** Returns true if field metadata_other_possible_responses is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata_other_possible_responses() {
    return this.metadata_other_possible_responses != null;
  }

  public void setMetadata_other_possible_responsesIsSet(boolean value) {
    if (!value) {
      this.metadata_other_possible_responses = null;
    }
  }

  public int getMetadata_people_presentSize() {
    return (this.metadata_people_present == null) ? 0 : this.metadata_people_present.size();
  }

  public java.util.Iterator<String> getMetadata_people_presentIterator() {
    return (this.metadata_people_present == null) ? null : this.metadata_people_present.iterator();
  }

  public void addToMetadata_people_present(String elem) {
    if (this.metadata_people_present == null) {
      this.metadata_people_present = new ArrayList<String>();
    }
    this.metadata_people_present.add(elem);
  }

  public List<String> getMetadata_people_present() {
    return this.metadata_people_present;
  }

  public ProcessedRobotPresenterData setMetadata_people_present(List<String> metadata_people_present) {
    this.metadata_people_present = metadata_people_present;
    return this;
  }

  public void unsetMetadata_people_present() {
    this.metadata_people_present = null;
  }

  /** Returns true if field metadata_people_present is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata_people_present() {
    return this.metadata_people_present != null;
  }

  public void setMetadata_people_presentIsSet(boolean value) {
    if (!value) {
      this.metadata_people_present = null;
    }
  }

  public String getMetadata_script_id() {
    return this.metadata_script_id;
  }

  public ProcessedRobotPresenterData setMetadata_script_id(String metadata_script_id) {
    this.metadata_script_id = metadata_script_id;
    return this;
  }

  public void unsetMetadata_script_id() {
    this.metadata_script_id = null;
  }

  /** Returns true if field metadata_script_id is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata_script_id() {
    return this.metadata_script_id != null;
  }

  public void setMetadata_script_idIsSet(boolean value) {
    if (!value) {
      this.metadata_script_id = null;
    }
  }

  public int getMetadata_location_geometry_coordinatesSize() {
    return (this.metadata_location_geometry_coordinates == null) ? 0 : this.metadata_location_geometry_coordinates.size();
  }

  public java.util.Iterator<Double> getMetadata_location_geometry_coordinatesIterator() {
    return (this.metadata_location_geometry_coordinates == null) ? null : this.metadata_location_geometry_coordinates.iterator();
  }

  public void addToMetadata_location_geometry_coordinates(double elem) {
    if (this.metadata_location_geometry_coordinates == null) {
      this.metadata_location_geometry_coordinates = new ArrayList<Double>();
    }
    this.metadata_location_geometry_coordinates.add(elem);
  }

  public List<Double> getMetadata_location_geometry_coordinates() {
    return this.metadata_location_geometry_coordinates;
  }

  public ProcessedRobotPresenterData setMetadata_location_geometry_coordinates(List<Double> metadata_location_geometry_coordinates) {
    this.metadata_location_geometry_coordinates = metadata_location_geometry_coordinates;
    return this;
  }

  public void unsetMetadata_location_geometry_coordinates() {
    this.metadata_location_geometry_coordinates = null;
  }

  /** Returns true if field metadata_location_geometry_coordinates is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata_location_geometry_coordinates() {
    return this.metadata_location_geometry_coordinates != null;
  }

  public void setMetadata_location_geometry_coordinatesIsSet(boolean value) {
    if (!value) {
      this.metadata_location_geometry_coordinates = null;
    }
  }

  public String getMetadata_location_geometry_type() {
    return this.metadata_location_geometry_type;
  }

  public ProcessedRobotPresenterData setMetadata_location_geometry_type(String metadata_location_geometry_type) {
    this.metadata_location_geometry_type = metadata_location_geometry_type;
    return this;
  }

  public void unsetMetadata_location_geometry_type() {
    this.metadata_location_geometry_type = null;
  }

  /** Returns true if field metadata_location_geometry_type is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata_location_geometry_type() {
    return this.metadata_location_geometry_type != null;
  }

  public void setMetadata_location_geometry_typeIsSet(boolean value) {
    if (!value) {
      this.metadata_location_geometry_type = null;
    }
  }

  public String getMetadata_location_type() {
    return this.metadata_location_type;
  }

  public ProcessedRobotPresenterData setMetadata_location_type(String metadata_location_type) {
    this.metadata_location_type = metadata_location_type;
    return this;
  }

  public void unsetMetadata_location_type() {
    this.metadata_location_type = null;
  }

  /** Returns true if field metadata_location_type is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata_location_type() {
    return this.metadata_location_type != null;
  }

  public void setMetadata_location_typeIsSet(boolean value) {
    if (!value) {
      this.metadata_location_type = null;
    }
  }

  public int getMetadata_location_properties_nameSize() {
    return (this.metadata_location_properties_name == null) ? 0 : this.metadata_location_properties_name.size();
  }

  public java.util.Iterator<String> getMetadata_location_properties_nameIterator() {
    return (this.metadata_location_properties_name == null) ? null : this.metadata_location_properties_name.iterator();
  }

  public void addToMetadata_location_properties_name(String elem) {
    if (this.metadata_location_properties_name == null) {
      this.metadata_location_properties_name = new ArrayList<String>();
    }
    this.metadata_location_properties_name.add(elem);
  }

  public List<String> getMetadata_location_properties_name() {
    return this.metadata_location_properties_name;
  }

  public ProcessedRobotPresenterData setMetadata_location_properties_name(List<String> metadata_location_properties_name) {
    this.metadata_location_properties_name = metadata_location_properties_name;
    return this;
  }

  public void unsetMetadata_location_properties_name() {
    this.metadata_location_properties_name = null;
  }

  /** Returns true if field metadata_location_properties_name is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata_location_properties_name() {
    return this.metadata_location_properties_name != null;
  }

  public void setMetadata_location_properties_nameIsSet(boolean value) {
    if (!value) {
      this.metadata_location_properties_name = null;
    }
  }

  public String getMetadata_scene_id() {
    return this.metadata_scene_id;
  }

  public ProcessedRobotPresenterData setMetadata_scene_id(String metadata_scene_id) {
    this.metadata_scene_id = metadata_scene_id;
    return this;
  }

  public void unsetMetadata_scene_id() {
    this.metadata_scene_id = null;
  }

  /** Returns true if field metadata_scene_id is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata_scene_id() {
    return this.metadata_scene_id != null;
  }

  public void setMetadata_scene_idIsSet(boolean value) {
    if (!value) {
      this.metadata_scene_id = null;
    }
  }

  public int getSemantic_keywordsSize() {
    return (this.semantic_keywords == null) ? 0 : this.semantic_keywords.size();
  }

  public java.util.Iterator<String> getSemantic_keywordsIterator() {
    return (this.semantic_keywords == null) ? null : this.semantic_keywords.iterator();
  }

  public void addToSemantic_keywords(String elem) {
    if (this.semantic_keywords == null) {
      this.semantic_keywords = new ArrayList<String>();
    }
    this.semantic_keywords.add(elem);
  }

  public List<String> getSemantic_keywords() {
    return this.semantic_keywords;
  }

  public ProcessedRobotPresenterData setSemantic_keywords(List<String> semantic_keywords) {
    this.semantic_keywords = semantic_keywords;
    return this;
  }

  public void unsetSemantic_keywords() {
    this.semantic_keywords = null;
  }

  /** Returns true if field semantic_keywords is set (has been assigned a value) and false otherwise */
  public boolean isSetSemantic_keywords() {
    return this.semantic_keywords != null;
  }

  public void setSemantic_keywordsIsSet(boolean value) {
    if (!value) {
      this.semantic_keywords = null;
    }
  }

  public int getSemantic_organisationsSize() {
    return (this.semantic_organisations == null) ? 0 : this.semantic_organisations.size();
  }

  public java.util.Iterator<String> getSemantic_organisationsIterator() {
    return (this.semantic_organisations == null) ? null : this.semantic_organisations.iterator();
  }

  public void addToSemantic_organisations(String elem) {
    if (this.semantic_organisations == null) {
      this.semantic_organisations = new ArrayList<String>();
    }
    this.semantic_organisations.add(elem);
  }

  public List<String> getSemantic_organisations() {
    return this.semantic_organisations;
  }

  public ProcessedRobotPresenterData setSemantic_organisations(List<String> semantic_organisations) {
    this.semantic_organisations = semantic_organisations;
    return this;
  }

  public void unsetSemantic_organisations() {
    this.semantic_organisations = null;
  }

  /** Returns true if field semantic_organisations is set (has been assigned a value) and false otherwise */
  public boolean isSetSemantic_organisations() {
    return this.semantic_organisations != null;
  }

  public void setSemantic_organisationsIsSet(boolean value) {
    if (!value) {
      this.semantic_organisations = null;
    }
  }

  public int getSemantic_peopleSize() {
    return (this.semantic_people == null) ? 0 : this.semantic_people.size();
  }

  public java.util.Iterator<String> getSemantic_peopleIterator() {
    return (this.semantic_people == null) ? null : this.semantic_people.iterator();
  }

  public void addToSemantic_people(String elem) {
    if (this.semantic_people == null) {
      this.semantic_people = new ArrayList<String>();
    }
    this.semantic_people.add(elem);
  }

  public List<String> getSemantic_people() {
    return this.semantic_people;
  }

  public ProcessedRobotPresenterData setSemantic_people(List<String> semantic_people) {
    this.semantic_people = semantic_people;
    return this;
  }

  public void unsetSemantic_people() {
    this.semantic_people = null;
  }

  /** Returns true if field semantic_people is set (has been assigned a value) and false otherwise */
  public boolean isSetSemantic_people() {
    return this.semantic_people != null;
  }

  public void setSemantic_peopleIsSet(boolean value) {
    if (!value) {
      this.semantic_people = null;
    }
  }

  public int getSemantic_placesSize() {
    return (this.semantic_places == null) ? 0 : this.semantic_places.size();
  }

  public java.util.Iterator<String> getSemantic_placesIterator() {
    return (this.semantic_places == null) ? null : this.semantic_places.iterator();
  }

  public void addToSemantic_places(String elem) {
    if (this.semantic_places == null) {
      this.semantic_places = new ArrayList<String>();
    }
    this.semantic_places.add(elem);
  }

  public List<String> getSemantic_places() {
    return this.semantic_places;
  }

  public ProcessedRobotPresenterData setSemantic_places(List<String> semantic_places) {
    this.semantic_places = semantic_places;
    return this;
  }

  public void unsetSemantic_places() {
    this.semantic_places = null;
  }

  /** Returns true if field semantic_places is set (has been assigned a value) and false otherwise */
  public boolean isSetSemantic_places() {
    return this.semantic_places != null;
  }

  public void setSemantic_placesIsSet(boolean value) {
    if (!value) {
      this.semantic_places = null;
    }
  }

  public int getSemantic_topicsSize() {
    return (this.semantic_topics == null) ? 0 : this.semantic_topics.size();
  }

  public java.util.Iterator<String> getSemantic_topicsIterator() {
    return (this.semantic_topics == null) ? null : this.semantic_topics.iterator();
  }

  public void addToSemantic_topics(String elem) {
    if (this.semantic_topics == null) {
      this.semantic_topics = new ArrayList<String>();
    }
    this.semantic_topics.add(elem);
  }

  public List<String> getSemantic_topics() {
    return this.semantic_topics;
  }

  public ProcessedRobotPresenterData setSemantic_topics(List<String> semantic_topics) {
    this.semantic_topics = semantic_topics;
    return this;
  }

  public void unsetSemantic_topics() {
    this.semantic_topics = null;
  }

  /** Returns true if field semantic_topics is set (has been assigned a value) and false otherwise */
  public boolean isSetSemantic_topics() {
    return this.semantic_topics != null;
  }

  public void setSemantic_topicsIsSet(boolean value) {
    if (!value) {
      this.semantic_topics = null;
    }
  }

  public int getEmotions_detected_emotionSize() {
    return (this.emotions_detected_emotion == null) ? 0 : this.emotions_detected_emotion.size();
  }

  public java.util.Iterator<String> getEmotions_detected_emotionIterator() {
    return (this.emotions_detected_emotion == null) ? null : this.emotions_detected_emotion.iterator();
  }

  public void addToEmotions_detected_emotion(String elem) {
    if (this.emotions_detected_emotion == null) {
      this.emotions_detected_emotion = new ArrayList<String>();
    }
    this.emotions_detected_emotion.add(elem);
  }

  public List<String> getEmotions_detected_emotion() {
    return this.emotions_detected_emotion;
  }

  public ProcessedRobotPresenterData setEmotions_detected_emotion(List<String> emotions_detected_emotion) {
    this.emotions_detected_emotion = emotions_detected_emotion;
    return this;
  }

  public void unsetEmotions_detected_emotion() {
    this.emotions_detected_emotion = null;
  }

  /** Returns true if field emotions_detected_emotion is set (has been assigned a value) and false otherwise */
  public boolean isSetEmotions_detected_emotion() {
    return this.emotions_detected_emotion != null;
  }

  public void setEmotions_detected_emotionIsSet(boolean value) {
    if (!value) {
      this.emotions_detected_emotion = null;
    }
  }

  public int getEmotions_information_stateSize() {
    return (this.emotions_information_state == null) ? 0 : this.emotions_information_state.size();
  }

  public java.util.Iterator<String> getEmotions_information_stateIterator() {
    return (this.emotions_information_state == null) ? null : this.emotions_information_state.iterator();
  }

  public void addToEmotions_information_state(String elem) {
    if (this.emotions_information_state == null) {
      this.emotions_information_state = new ArrayList<String>();
    }
    this.emotions_information_state.add(elem);
  }

  public List<String> getEmotions_information_state() {
    return this.emotions_information_state;
  }

  public ProcessedRobotPresenterData setEmotions_information_state(List<String> emotions_information_state) {
    this.emotions_information_state = emotions_information_state;
    return this;
  }

  public void unsetEmotions_information_state() {
    this.emotions_information_state = null;
  }

  /** Returns true if field emotions_information_state is set (has been assigned a value) and false otherwise */
  public boolean isSetEmotions_information_state() {
    return this.emotions_information_state != null;
  }

  public void setEmotions_information_stateIsSet(boolean value) {
    if (!value) {
      this.emotions_information_state = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STRUCTURE_PREPOSITIONAL_PHRASES_COUNT:
      if (value == null) {
        unsetStructure_prepositional_phrases_count();
      } else {
        setStructure_prepositional_phrases_count((Integer)value);
      }
      break;

    case STRUCTURE_ADJECTIVE_COUNT:
      if (value == null) {
        unsetStructure_adjective_count();
      } else {
        setStructure_adjective_count((Integer)value);
      }
      break;

    case STRUCTURE_NON_FUTURE:
      if (value == null) {
        unsetStructure_non_future();
      } else {
        setStructure_non_future((Integer)value);
      }
      break;

    case STRUCTURE_ACTIVE_SENTENCES:
      if (value == null) {
        unsetStructure_active_sentences();
      } else {
        setStructure_active_sentences((Integer)value);
      }
      break;

    case STRUCTURE_PERSONAL_PRONOUNS:
      if (value == null) {
        unsetStructure_personal_pronouns();
      } else {
        setStructure_personal_pronouns((Integer)value);
      }
      break;

    case STRUCTURE_WORD_LENGTH:
      if (value == null) {
        unsetStructure_word_length();
      } else {
        setStructure_word_length((Integer)value);
      }
      break;

    case STRUCTURE_NEGATIONS:
      if (value == null) {
        unsetStructure_negations();
      } else {
        setStructure_negations((Integer)value);
      }
      break;

    case STRUCTURE_ADVERBS:
      if (value == null) {
        unsetStructure_adverbs();
      } else {
        setStructure_adverbs((Integer)value);
      }
      break;

    case STRUCTURE_PASSIVE_SENTENCES:
      if (value == null) {
        unsetStructure_passive_sentences();
      } else {
        setStructure_passive_sentences((Integer)value);
      }
      break;

    case STRUCTURE_NUMBER_OF_SENTENCES:
      if (value == null) {
        unsetStructure_number_of_sentences();
      } else {
        setStructure_number_of_sentences((Integer)value);
      }
      break;

    case STRUCTURE_FUTURE:
      if (value == null) {
        unsetStructure_future();
      } else {
        setStructure_future((Integer)value);
      }
      break;

    case STRUCTURE_WORDCOUNT:
      if (value == null) {
        unsetStructure_wordcount();
      } else {
        setStructure_wordcount((Integer)value);
      }
      break;

    case METADATA_SPEAKER:
      if (value == null) {
        unsetMetadata_speaker();
      } else {
        setMetadata_speaker((String)value);
      }
      break;

    case METADATA_LANG:
      if (value == null) {
        unsetMetadata_lang();
      } else {
        setMetadata_lang((String)value);
      }
      break;

    case METADATA_TIMESTAMP:
      if (value == null) {
        unsetMetadata_timestamp();
      } else {
        setMetadata_timestamp((String)value);
      }
      break;

    case METADATA_INPUT_TEXT:
      if (value == null) {
        unsetMetadata_input_text();
      } else {
        setMetadata_input_text((String)value);
      }
      break;

    case METADATA_CONFIDENCE_SCORE:
      if (value == null) {
        unsetMetadata_confidence_score();
      } else {
        setMetadata_confidence_score((String)value);
      }
      break;

    case METADATA_OTHER_POSSIBLE_RESPONSES:
      if (value == null) {
        unsetMetadata_other_possible_responses();
      } else {
        setMetadata_other_possible_responses((List<String>)value);
      }
      break;

    case METADATA_PEOPLE_PRESENT:
      if (value == null) {
        unsetMetadata_people_present();
      } else {
        setMetadata_people_present((List<String>)value);
      }
      break;

    case METADATA_SCRIPT_ID:
      if (value == null) {
        unsetMetadata_script_id();
      } else {
        setMetadata_script_id((String)value);
      }
      break;

    case METADATA_LOCATION_GEOMETRY_COORDINATES:
      if (value == null) {
        unsetMetadata_location_geometry_coordinates();
      } else {
        setMetadata_location_geometry_coordinates((List<Double>)value);
      }
      break;

    case METADATA_LOCATION_GEOMETRY_TYPE:
      if (value == null) {
        unsetMetadata_location_geometry_type();
      } else {
        setMetadata_location_geometry_type((String)value);
      }
      break;

    case METADATA_LOCATION_TYPE:
      if (value == null) {
        unsetMetadata_location_type();
      } else {
        setMetadata_location_type((String)value);
      }
      break;

    case METADATA_LOCATION_PROPERTIES_NAME:
      if (value == null) {
        unsetMetadata_location_properties_name();
      } else {
        setMetadata_location_properties_name((List<String>)value);
      }
      break;

    case METADATA_SCENE_ID:
      if (value == null) {
        unsetMetadata_scene_id();
      } else {
        setMetadata_scene_id((String)value);
      }
      break;

    case SEMANTIC_KEYWORDS:
      if (value == null) {
        unsetSemantic_keywords();
      } else {
        setSemantic_keywords((List<String>)value);
      }
      break;

    case SEMANTIC_ORGANISATIONS:
      if (value == null) {
        unsetSemantic_organisations();
      } else {
        setSemantic_organisations((List<String>)value);
      }
      break;

    case SEMANTIC_PEOPLE:
      if (value == null) {
        unsetSemantic_people();
      } else {
        setSemantic_people((List<String>)value);
      }
      break;

    case SEMANTIC_PLACES:
      if (value == null) {
        unsetSemantic_places();
      } else {
        setSemantic_places((List<String>)value);
      }
      break;

    case SEMANTIC_TOPICS:
      if (value == null) {
        unsetSemantic_topics();
      } else {
        setSemantic_topics((List<String>)value);
      }
      break;

    case EMOTIONS_DETECTED_EMOTION:
      if (value == null) {
        unsetEmotions_detected_emotion();
      } else {
        setEmotions_detected_emotion((List<String>)value);
      }
      break;

    case EMOTIONS_INFORMATION_STATE:
      if (value == null) {
        unsetEmotions_information_state();
      } else {
        setEmotions_information_state((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STRUCTURE_PREPOSITIONAL_PHRASES_COUNT:
      return getStructure_prepositional_phrases_count();

    case STRUCTURE_ADJECTIVE_COUNT:
      return getStructure_adjective_count();

    case STRUCTURE_NON_FUTURE:
      return getStructure_non_future();

    case STRUCTURE_ACTIVE_SENTENCES:
      return getStructure_active_sentences();

    case STRUCTURE_PERSONAL_PRONOUNS:
      return getStructure_personal_pronouns();

    case STRUCTURE_WORD_LENGTH:
      return getStructure_word_length();

    case STRUCTURE_NEGATIONS:
      return getStructure_negations();

    case STRUCTURE_ADVERBS:
      return getStructure_adverbs();

    case STRUCTURE_PASSIVE_SENTENCES:
      return getStructure_passive_sentences();

    case STRUCTURE_NUMBER_OF_SENTENCES:
      return getStructure_number_of_sentences();

    case STRUCTURE_FUTURE:
      return getStructure_future();

    case STRUCTURE_WORDCOUNT:
      return getStructure_wordcount();

    case METADATA_SPEAKER:
      return getMetadata_speaker();

    case METADATA_LANG:
      return getMetadata_lang();

    case METADATA_TIMESTAMP:
      return getMetadata_timestamp();

    case METADATA_INPUT_TEXT:
      return getMetadata_input_text();

    case METADATA_CONFIDENCE_SCORE:
      return getMetadata_confidence_score();

    case METADATA_OTHER_POSSIBLE_RESPONSES:
      return getMetadata_other_possible_responses();

    case METADATA_PEOPLE_PRESENT:
      return getMetadata_people_present();

    case METADATA_SCRIPT_ID:
      return getMetadata_script_id();

    case METADATA_LOCATION_GEOMETRY_COORDINATES:
      return getMetadata_location_geometry_coordinates();

    case METADATA_LOCATION_GEOMETRY_TYPE:
      return getMetadata_location_geometry_type();

    case METADATA_LOCATION_TYPE:
      return getMetadata_location_type();

    case METADATA_LOCATION_PROPERTIES_NAME:
      return getMetadata_location_properties_name();

    case METADATA_SCENE_ID:
      return getMetadata_scene_id();

    case SEMANTIC_KEYWORDS:
      return getSemantic_keywords();

    case SEMANTIC_ORGANISATIONS:
      return getSemantic_organisations();

    case SEMANTIC_PEOPLE:
      return getSemantic_people();

    case SEMANTIC_PLACES:
      return getSemantic_places();

    case SEMANTIC_TOPICS:
      return getSemantic_topics();

    case EMOTIONS_DETECTED_EMOTION:
      return getEmotions_detected_emotion();

    case EMOTIONS_INFORMATION_STATE:
      return getEmotions_information_state();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STRUCTURE_PREPOSITIONAL_PHRASES_COUNT:
      return isSetStructure_prepositional_phrases_count();
    case STRUCTURE_ADJECTIVE_COUNT:
      return isSetStructure_adjective_count();
    case STRUCTURE_NON_FUTURE:
      return isSetStructure_non_future();
    case STRUCTURE_ACTIVE_SENTENCES:
      return isSetStructure_active_sentences();
    case STRUCTURE_PERSONAL_PRONOUNS:
      return isSetStructure_personal_pronouns();
    case STRUCTURE_WORD_LENGTH:
      return isSetStructure_word_length();
    case STRUCTURE_NEGATIONS:
      return isSetStructure_negations();
    case STRUCTURE_ADVERBS:
      return isSetStructure_adverbs();
    case STRUCTURE_PASSIVE_SENTENCES:
      return isSetStructure_passive_sentences();
    case STRUCTURE_NUMBER_OF_SENTENCES:
      return isSetStructure_number_of_sentences();
    case STRUCTURE_FUTURE:
      return isSetStructure_future();
    case STRUCTURE_WORDCOUNT:
      return isSetStructure_wordcount();
    case METADATA_SPEAKER:
      return isSetMetadata_speaker();
    case METADATA_LANG:
      return isSetMetadata_lang();
    case METADATA_TIMESTAMP:
      return isSetMetadata_timestamp();
    case METADATA_INPUT_TEXT:
      return isSetMetadata_input_text();
    case METADATA_CONFIDENCE_SCORE:
      return isSetMetadata_confidence_score();
    case METADATA_OTHER_POSSIBLE_RESPONSES:
      return isSetMetadata_other_possible_responses();
    case METADATA_PEOPLE_PRESENT:
      return isSetMetadata_people_present();
    case METADATA_SCRIPT_ID:
      return isSetMetadata_script_id();
    case METADATA_LOCATION_GEOMETRY_COORDINATES:
      return isSetMetadata_location_geometry_coordinates();
    case METADATA_LOCATION_GEOMETRY_TYPE:
      return isSetMetadata_location_geometry_type();
    case METADATA_LOCATION_TYPE:
      return isSetMetadata_location_type();
    case METADATA_LOCATION_PROPERTIES_NAME:
      return isSetMetadata_location_properties_name();
    case METADATA_SCENE_ID:
      return isSetMetadata_scene_id();
    case SEMANTIC_KEYWORDS:
      return isSetSemantic_keywords();
    case SEMANTIC_ORGANISATIONS:
      return isSetSemantic_organisations();
    case SEMANTIC_PEOPLE:
      return isSetSemantic_people();
    case SEMANTIC_PLACES:
      return isSetSemantic_places();
    case SEMANTIC_TOPICS:
      return isSetSemantic_topics();
    case EMOTIONS_DETECTED_EMOTION:
      return isSetEmotions_detected_emotion();
    case EMOTIONS_INFORMATION_STATE:
      return isSetEmotions_information_state();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProcessedRobotPresenterData)
      return this.equals((ProcessedRobotPresenterData)that);
    return false;
  }

  public boolean equals(ProcessedRobotPresenterData that) {
    if (that == null)
      return false;

    boolean this_present_structure_prepositional_phrases_count = true;
    boolean that_present_structure_prepositional_phrases_count = true;
    if (this_present_structure_prepositional_phrases_count || that_present_structure_prepositional_phrases_count) {
      if (!(this_present_structure_prepositional_phrases_count && that_present_structure_prepositional_phrases_count))
        return false;
      if (this.structure_prepositional_phrases_count != that.structure_prepositional_phrases_count)
        return false;
    }

    boolean this_present_structure_adjective_count = true;
    boolean that_present_structure_adjective_count = true;
    if (this_present_structure_adjective_count || that_present_structure_adjective_count) {
      if (!(this_present_structure_adjective_count && that_present_structure_adjective_count))
        return false;
      if (this.structure_adjective_count != that.structure_adjective_count)
        return false;
    }

    boolean this_present_structure_non_future = true;
    boolean that_present_structure_non_future = true;
    if (this_present_structure_non_future || that_present_structure_non_future) {
      if (!(this_present_structure_non_future && that_present_structure_non_future))
        return false;
      if (this.structure_non_future != that.structure_non_future)
        return false;
    }

    boolean this_present_structure_active_sentences = true;
    boolean that_present_structure_active_sentences = true;
    if (this_present_structure_active_sentences || that_present_structure_active_sentences) {
      if (!(this_present_structure_active_sentences && that_present_structure_active_sentences))
        return false;
      if (this.structure_active_sentences != that.structure_active_sentences)
        return false;
    }

    boolean this_present_structure_personal_pronouns = true;
    boolean that_present_structure_personal_pronouns = true;
    if (this_present_structure_personal_pronouns || that_present_structure_personal_pronouns) {
      if (!(this_present_structure_personal_pronouns && that_present_structure_personal_pronouns))
        return false;
      if (this.structure_personal_pronouns != that.structure_personal_pronouns)
        return false;
    }

    boolean this_present_structure_word_length = true;
    boolean that_present_structure_word_length = true;
    if (this_present_structure_word_length || that_present_structure_word_length) {
      if (!(this_present_structure_word_length && that_present_structure_word_length))
        return false;
      if (this.structure_word_length != that.structure_word_length)
        return false;
    }

    boolean this_present_structure_negations = true;
    boolean that_present_structure_negations = true;
    if (this_present_structure_negations || that_present_structure_negations) {
      if (!(this_present_structure_negations && that_present_structure_negations))
        return false;
      if (this.structure_negations != that.structure_negations)
        return false;
    }

    boolean this_present_structure_adverbs = true;
    boolean that_present_structure_adverbs = true;
    if (this_present_structure_adverbs || that_present_structure_adverbs) {
      if (!(this_present_structure_adverbs && that_present_structure_adverbs))
        return false;
      if (this.structure_adverbs != that.structure_adverbs)
        return false;
    }

    boolean this_present_structure_passive_sentences = true;
    boolean that_present_structure_passive_sentences = true;
    if (this_present_structure_passive_sentences || that_present_structure_passive_sentences) {
      if (!(this_present_structure_passive_sentences && that_present_structure_passive_sentences))
        return false;
      if (this.structure_passive_sentences != that.structure_passive_sentences)
        return false;
    }

    boolean this_present_structure_number_of_sentences = true;
    boolean that_present_structure_number_of_sentences = true;
    if (this_present_structure_number_of_sentences || that_present_structure_number_of_sentences) {
      if (!(this_present_structure_number_of_sentences && that_present_structure_number_of_sentences))
        return false;
      if (this.structure_number_of_sentences != that.structure_number_of_sentences)
        return false;
    }

    boolean this_present_structure_future = true;
    boolean that_present_structure_future = true;
    if (this_present_structure_future || that_present_structure_future) {
      if (!(this_present_structure_future && that_present_structure_future))
        return false;
      if (this.structure_future != that.structure_future)
        return false;
    }

    boolean this_present_structure_wordcount = true;
    boolean that_present_structure_wordcount = true;
    if (this_present_structure_wordcount || that_present_structure_wordcount) {
      if (!(this_present_structure_wordcount && that_present_structure_wordcount))
        return false;
      if (this.structure_wordcount != that.structure_wordcount)
        return false;
    }

    boolean this_present_metadata_speaker = true && this.isSetMetadata_speaker();
    boolean that_present_metadata_speaker = true && that.isSetMetadata_speaker();
    if (this_present_metadata_speaker || that_present_metadata_speaker) {
      if (!(this_present_metadata_speaker && that_present_metadata_speaker))
        return false;
      if (!this.metadata_speaker.equals(that.metadata_speaker))
        return false;
    }

    boolean this_present_metadata_lang = true && this.isSetMetadata_lang();
    boolean that_present_metadata_lang = true && that.isSetMetadata_lang();
    if (this_present_metadata_lang || that_present_metadata_lang) {
      if (!(this_present_metadata_lang && that_present_metadata_lang))
        return false;
      if (!this.metadata_lang.equals(that.metadata_lang))
        return false;
    }

    boolean this_present_metadata_timestamp = true && this.isSetMetadata_timestamp();
    boolean that_present_metadata_timestamp = true && that.isSetMetadata_timestamp();
    if (this_present_metadata_timestamp || that_present_metadata_timestamp) {
      if (!(this_present_metadata_timestamp && that_present_metadata_timestamp))
        return false;
      if (!this.metadata_timestamp.equals(that.metadata_timestamp))
        return false;
    }

    boolean this_present_metadata_input_text = true && this.isSetMetadata_input_text();
    boolean that_present_metadata_input_text = true && that.isSetMetadata_input_text();
    if (this_present_metadata_input_text || that_present_metadata_input_text) {
      if (!(this_present_metadata_input_text && that_present_metadata_input_text))
        return false;
      if (!this.metadata_input_text.equals(that.metadata_input_text))
        return false;
    }

    boolean this_present_metadata_confidence_score = true && this.isSetMetadata_confidence_score();
    boolean that_present_metadata_confidence_score = true && that.isSetMetadata_confidence_score();
    if (this_present_metadata_confidence_score || that_present_metadata_confidence_score) {
      if (!(this_present_metadata_confidence_score && that_present_metadata_confidence_score))
        return false;
      if (!this.metadata_confidence_score.equals(that.metadata_confidence_score))
        return false;
    }

    boolean this_present_metadata_other_possible_responses = true && this.isSetMetadata_other_possible_responses();
    boolean that_present_metadata_other_possible_responses = true && that.isSetMetadata_other_possible_responses();
    if (this_present_metadata_other_possible_responses || that_present_metadata_other_possible_responses) {
      if (!(this_present_metadata_other_possible_responses && that_present_metadata_other_possible_responses))
        return false;
      if (!this.metadata_other_possible_responses.equals(that.metadata_other_possible_responses))
        return false;
    }

    boolean this_present_metadata_people_present = true && this.isSetMetadata_people_present();
    boolean that_present_metadata_people_present = true && that.isSetMetadata_people_present();
    if (this_present_metadata_people_present || that_present_metadata_people_present) {
      if (!(this_present_metadata_people_present && that_present_metadata_people_present))
        return false;
      if (!this.metadata_people_present.equals(that.metadata_people_present))
        return false;
    }

    boolean this_present_metadata_script_id = true && this.isSetMetadata_script_id();
    boolean that_present_metadata_script_id = true && that.isSetMetadata_script_id();
    if (this_present_metadata_script_id || that_present_metadata_script_id) {
      if (!(this_present_metadata_script_id && that_present_metadata_script_id))
        return false;
      if (!this.metadata_script_id.equals(that.metadata_script_id))
        return false;
    }

    boolean this_present_metadata_location_geometry_coordinates = true && this.isSetMetadata_location_geometry_coordinates();
    boolean that_present_metadata_location_geometry_coordinates = true && that.isSetMetadata_location_geometry_coordinates();
    if (this_present_metadata_location_geometry_coordinates || that_present_metadata_location_geometry_coordinates) {
      if (!(this_present_metadata_location_geometry_coordinates && that_present_metadata_location_geometry_coordinates))
        return false;
      if (!this.metadata_location_geometry_coordinates.equals(that.metadata_location_geometry_coordinates))
        return false;
    }

    boolean this_present_metadata_location_geometry_type = true && this.isSetMetadata_location_geometry_type();
    boolean that_present_metadata_location_geometry_type = true && that.isSetMetadata_location_geometry_type();
    if (this_present_metadata_location_geometry_type || that_present_metadata_location_geometry_type) {
      if (!(this_present_metadata_location_geometry_type && that_present_metadata_location_geometry_type))
        return false;
      if (!this.metadata_location_geometry_type.equals(that.metadata_location_geometry_type))
        return false;
    }

    boolean this_present_metadata_location_type = true && this.isSetMetadata_location_type();
    boolean that_present_metadata_location_type = true && that.isSetMetadata_location_type();
    if (this_present_metadata_location_type || that_present_metadata_location_type) {
      if (!(this_present_metadata_location_type && that_present_metadata_location_type))
        return false;
      if (!this.metadata_location_type.equals(that.metadata_location_type))
        return false;
    }

    boolean this_present_metadata_location_properties_name = true && this.isSetMetadata_location_properties_name();
    boolean that_present_metadata_location_properties_name = true && that.isSetMetadata_location_properties_name();
    if (this_present_metadata_location_properties_name || that_present_metadata_location_properties_name) {
      if (!(this_present_metadata_location_properties_name && that_present_metadata_location_properties_name))
        return false;
      if (!this.metadata_location_properties_name.equals(that.metadata_location_properties_name))
        return false;
    }

    boolean this_present_metadata_scene_id = true && this.isSetMetadata_scene_id();
    boolean that_present_metadata_scene_id = true && that.isSetMetadata_scene_id();
    if (this_present_metadata_scene_id || that_present_metadata_scene_id) {
      if (!(this_present_metadata_scene_id && that_present_metadata_scene_id))
        return false;
      if (!this.metadata_scene_id.equals(that.metadata_scene_id))
        return false;
    }

    boolean this_present_semantic_keywords = true && this.isSetSemantic_keywords();
    boolean that_present_semantic_keywords = true && that.isSetSemantic_keywords();
    if (this_present_semantic_keywords || that_present_semantic_keywords) {
      if (!(this_present_semantic_keywords && that_present_semantic_keywords))
        return false;
      if (!this.semantic_keywords.equals(that.semantic_keywords))
        return false;
    }

    boolean this_present_semantic_organisations = true && this.isSetSemantic_organisations();
    boolean that_present_semantic_organisations = true && that.isSetSemantic_organisations();
    if (this_present_semantic_organisations || that_present_semantic_organisations) {
      if (!(this_present_semantic_organisations && that_present_semantic_organisations))
        return false;
      if (!this.semantic_organisations.equals(that.semantic_organisations))
        return false;
    }

    boolean this_present_semantic_people = true && this.isSetSemantic_people();
    boolean that_present_semantic_people = true && that.isSetSemantic_people();
    if (this_present_semantic_people || that_present_semantic_people) {
      if (!(this_present_semantic_people && that_present_semantic_people))
        return false;
      if (!this.semantic_people.equals(that.semantic_people))
        return false;
    }

    boolean this_present_semantic_places = true && this.isSetSemantic_places();
    boolean that_present_semantic_places = true && that.isSetSemantic_places();
    if (this_present_semantic_places || that_present_semantic_places) {
      if (!(this_present_semantic_places && that_present_semantic_places))
        return false;
      if (!this.semantic_places.equals(that.semantic_places))
        return false;
    }

    boolean this_present_semantic_topics = true && this.isSetSemantic_topics();
    boolean that_present_semantic_topics = true && that.isSetSemantic_topics();
    if (this_present_semantic_topics || that_present_semantic_topics) {
      if (!(this_present_semantic_topics && that_present_semantic_topics))
        return false;
      if (!this.semantic_topics.equals(that.semantic_topics))
        return false;
    }

    boolean this_present_emotions_detected_emotion = true && this.isSetEmotions_detected_emotion();
    boolean that_present_emotions_detected_emotion = true && that.isSetEmotions_detected_emotion();
    if (this_present_emotions_detected_emotion || that_present_emotions_detected_emotion) {
      if (!(this_present_emotions_detected_emotion && that_present_emotions_detected_emotion))
        return false;
      if (!this.emotions_detected_emotion.equals(that.emotions_detected_emotion))
        return false;
    }

    boolean this_present_emotions_information_state = true && this.isSetEmotions_information_state();
    boolean that_present_emotions_information_state = true && that.isSetEmotions_information_state();
    if (this_present_emotions_information_state || that_present_emotions_information_state) {
      if (!(this_present_emotions_information_state && that_present_emotions_information_state))
        return false;
      if (!this.emotions_information_state.equals(that.emotions_information_state))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_structure_prepositional_phrases_count = true;
    list.add(present_structure_prepositional_phrases_count);
    if (present_structure_prepositional_phrases_count)
      list.add(structure_prepositional_phrases_count);

    boolean present_structure_adjective_count = true;
    list.add(present_structure_adjective_count);
    if (present_structure_adjective_count)
      list.add(structure_adjective_count);

    boolean present_structure_non_future = true;
    list.add(present_structure_non_future);
    if (present_structure_non_future)
      list.add(structure_non_future);

    boolean present_structure_active_sentences = true;
    list.add(present_structure_active_sentences);
    if (present_structure_active_sentences)
      list.add(structure_active_sentences);

    boolean present_structure_personal_pronouns = true;
    list.add(present_structure_personal_pronouns);
    if (present_structure_personal_pronouns)
      list.add(structure_personal_pronouns);

    boolean present_structure_word_length = true;
    list.add(present_structure_word_length);
    if (present_structure_word_length)
      list.add(structure_word_length);

    boolean present_structure_negations = true;
    list.add(present_structure_negations);
    if (present_structure_negations)
      list.add(structure_negations);

    boolean present_structure_adverbs = true;
    list.add(present_structure_adverbs);
    if (present_structure_adverbs)
      list.add(structure_adverbs);

    boolean present_structure_passive_sentences = true;
    list.add(present_structure_passive_sentences);
    if (present_structure_passive_sentences)
      list.add(structure_passive_sentences);

    boolean present_structure_number_of_sentences = true;
    list.add(present_structure_number_of_sentences);
    if (present_structure_number_of_sentences)
      list.add(structure_number_of_sentences);

    boolean present_structure_future = true;
    list.add(present_structure_future);
    if (present_structure_future)
      list.add(structure_future);

    boolean present_structure_wordcount = true;
    list.add(present_structure_wordcount);
    if (present_structure_wordcount)
      list.add(structure_wordcount);

    boolean present_metadata_speaker = true && (isSetMetadata_speaker());
    list.add(present_metadata_speaker);
    if (present_metadata_speaker)
      list.add(metadata_speaker);

    boolean present_metadata_lang = true && (isSetMetadata_lang());
    list.add(present_metadata_lang);
    if (present_metadata_lang)
      list.add(metadata_lang);

    boolean present_metadata_timestamp = true && (isSetMetadata_timestamp());
    list.add(present_metadata_timestamp);
    if (present_metadata_timestamp)
      list.add(metadata_timestamp);

    boolean present_metadata_input_text = true && (isSetMetadata_input_text());
    list.add(present_metadata_input_text);
    if (present_metadata_input_text)
      list.add(metadata_input_text);

    boolean present_metadata_confidence_score = true && (isSetMetadata_confidence_score());
    list.add(present_metadata_confidence_score);
    if (present_metadata_confidence_score)
      list.add(metadata_confidence_score);

    boolean present_metadata_other_possible_responses = true && (isSetMetadata_other_possible_responses());
    list.add(present_metadata_other_possible_responses);
    if (present_metadata_other_possible_responses)
      list.add(metadata_other_possible_responses);

    boolean present_metadata_people_present = true && (isSetMetadata_people_present());
    list.add(present_metadata_people_present);
    if (present_metadata_people_present)
      list.add(metadata_people_present);

    boolean present_metadata_script_id = true && (isSetMetadata_script_id());
    list.add(present_metadata_script_id);
    if (present_metadata_script_id)
      list.add(metadata_script_id);

    boolean present_metadata_location_geometry_coordinates = true && (isSetMetadata_location_geometry_coordinates());
    list.add(present_metadata_location_geometry_coordinates);
    if (present_metadata_location_geometry_coordinates)
      list.add(metadata_location_geometry_coordinates);

    boolean present_metadata_location_geometry_type = true && (isSetMetadata_location_geometry_type());
    list.add(present_metadata_location_geometry_type);
    if (present_metadata_location_geometry_type)
      list.add(metadata_location_geometry_type);

    boolean present_metadata_location_type = true && (isSetMetadata_location_type());
    list.add(present_metadata_location_type);
    if (present_metadata_location_type)
      list.add(metadata_location_type);

    boolean present_metadata_location_properties_name = true && (isSetMetadata_location_properties_name());
    list.add(present_metadata_location_properties_name);
    if (present_metadata_location_properties_name)
      list.add(metadata_location_properties_name);

    boolean present_metadata_scene_id = true && (isSetMetadata_scene_id());
    list.add(present_metadata_scene_id);
    if (present_metadata_scene_id)
      list.add(metadata_scene_id);

    boolean present_semantic_keywords = true && (isSetSemantic_keywords());
    list.add(present_semantic_keywords);
    if (present_semantic_keywords)
      list.add(semantic_keywords);

    boolean present_semantic_organisations = true && (isSetSemantic_organisations());
    list.add(present_semantic_organisations);
    if (present_semantic_organisations)
      list.add(semantic_organisations);

    boolean present_semantic_people = true && (isSetSemantic_people());
    list.add(present_semantic_people);
    if (present_semantic_people)
      list.add(semantic_people);

    boolean present_semantic_places = true && (isSetSemantic_places());
    list.add(present_semantic_places);
    if (present_semantic_places)
      list.add(semantic_places);

    boolean present_semantic_topics = true && (isSetSemantic_topics());
    list.add(present_semantic_topics);
    if (present_semantic_topics)
      list.add(semantic_topics);

    boolean present_emotions_detected_emotion = true && (isSetEmotions_detected_emotion());
    list.add(present_emotions_detected_emotion);
    if (present_emotions_detected_emotion)
      list.add(emotions_detected_emotion);

    boolean present_emotions_information_state = true && (isSetEmotions_information_state());
    list.add(present_emotions_information_state);
    if (present_emotions_information_state)
      list.add(emotions_information_state);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProcessedRobotPresenterData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStructure_prepositional_phrases_count()).compareTo(other.isSetStructure_prepositional_phrases_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructure_prepositional_phrases_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structure_prepositional_phrases_count, other.structure_prepositional_phrases_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStructure_adjective_count()).compareTo(other.isSetStructure_adjective_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructure_adjective_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structure_adjective_count, other.structure_adjective_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStructure_non_future()).compareTo(other.isSetStructure_non_future());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructure_non_future()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structure_non_future, other.structure_non_future);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStructure_active_sentences()).compareTo(other.isSetStructure_active_sentences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructure_active_sentences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structure_active_sentences, other.structure_active_sentences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStructure_personal_pronouns()).compareTo(other.isSetStructure_personal_pronouns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructure_personal_pronouns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structure_personal_pronouns, other.structure_personal_pronouns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStructure_word_length()).compareTo(other.isSetStructure_word_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructure_word_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structure_word_length, other.structure_word_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStructure_negations()).compareTo(other.isSetStructure_negations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructure_negations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structure_negations, other.structure_negations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStructure_adverbs()).compareTo(other.isSetStructure_adverbs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructure_adverbs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structure_adverbs, other.structure_adverbs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStructure_passive_sentences()).compareTo(other.isSetStructure_passive_sentences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructure_passive_sentences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structure_passive_sentences, other.structure_passive_sentences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStructure_number_of_sentences()).compareTo(other.isSetStructure_number_of_sentences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructure_number_of_sentences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structure_number_of_sentences, other.structure_number_of_sentences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStructure_future()).compareTo(other.isSetStructure_future());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructure_future()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structure_future, other.structure_future);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStructure_wordcount()).compareTo(other.isSetStructure_wordcount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructure_wordcount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structure_wordcount, other.structure_wordcount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata_speaker()).compareTo(other.isSetMetadata_speaker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata_speaker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata_speaker, other.metadata_speaker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata_lang()).compareTo(other.isSetMetadata_lang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata_lang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata_lang, other.metadata_lang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata_timestamp()).compareTo(other.isSetMetadata_timestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata_timestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata_timestamp, other.metadata_timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata_input_text()).compareTo(other.isSetMetadata_input_text());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata_input_text()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata_input_text, other.metadata_input_text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata_confidence_score()).compareTo(other.isSetMetadata_confidence_score());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata_confidence_score()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata_confidence_score, other.metadata_confidence_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata_other_possible_responses()).compareTo(other.isSetMetadata_other_possible_responses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata_other_possible_responses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata_other_possible_responses, other.metadata_other_possible_responses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata_people_present()).compareTo(other.isSetMetadata_people_present());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata_people_present()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata_people_present, other.metadata_people_present);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata_script_id()).compareTo(other.isSetMetadata_script_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata_script_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata_script_id, other.metadata_script_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata_location_geometry_coordinates()).compareTo(other.isSetMetadata_location_geometry_coordinates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata_location_geometry_coordinates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata_location_geometry_coordinates, other.metadata_location_geometry_coordinates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata_location_geometry_type()).compareTo(other.isSetMetadata_location_geometry_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata_location_geometry_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata_location_geometry_type, other.metadata_location_geometry_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata_location_type()).compareTo(other.isSetMetadata_location_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata_location_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata_location_type, other.metadata_location_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata_location_properties_name()).compareTo(other.isSetMetadata_location_properties_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata_location_properties_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata_location_properties_name, other.metadata_location_properties_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata_scene_id()).compareTo(other.isSetMetadata_scene_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata_scene_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata_scene_id, other.metadata_scene_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSemantic_keywords()).compareTo(other.isSetSemantic_keywords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSemantic_keywords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.semantic_keywords, other.semantic_keywords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSemantic_organisations()).compareTo(other.isSetSemantic_organisations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSemantic_organisations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.semantic_organisations, other.semantic_organisations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSemantic_people()).compareTo(other.isSetSemantic_people());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSemantic_people()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.semantic_people, other.semantic_people);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSemantic_places()).compareTo(other.isSetSemantic_places());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSemantic_places()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.semantic_places, other.semantic_places);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSemantic_topics()).compareTo(other.isSetSemantic_topics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSemantic_topics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.semantic_topics, other.semantic_topics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmotions_detected_emotion()).compareTo(other.isSetEmotions_detected_emotion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmotions_detected_emotion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emotions_detected_emotion, other.emotions_detected_emotion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmotions_information_state()).compareTo(other.isSetEmotions_information_state());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmotions_information_state()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emotions_information_state, other.emotions_information_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProcessedRobotPresenterData(");
    boolean first = true;

    sb.append("structure_prepositional_phrases_count:");
    sb.append(this.structure_prepositional_phrases_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("structure_adjective_count:");
    sb.append(this.structure_adjective_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("structure_non_future:");
    sb.append(this.structure_non_future);
    first = false;
    if (!first) sb.append(", ");
    sb.append("structure_active_sentences:");
    sb.append(this.structure_active_sentences);
    first = false;
    if (!first) sb.append(", ");
    sb.append("structure_personal_pronouns:");
    sb.append(this.structure_personal_pronouns);
    first = false;
    if (!first) sb.append(", ");
    sb.append("structure_word_length:");
    sb.append(this.structure_word_length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("structure_negations:");
    sb.append(this.structure_negations);
    first = false;
    if (!first) sb.append(", ");
    sb.append("structure_adverbs:");
    sb.append(this.structure_adverbs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("structure_passive_sentences:");
    sb.append(this.structure_passive_sentences);
    first = false;
    if (!first) sb.append(", ");
    sb.append("structure_number_of_sentences:");
    sb.append(this.structure_number_of_sentences);
    first = false;
    if (!first) sb.append(", ");
    sb.append("structure_future:");
    sb.append(this.structure_future);
    first = false;
    if (!first) sb.append(", ");
    sb.append("structure_wordcount:");
    sb.append(this.structure_wordcount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata_speaker:");
    if (this.metadata_speaker == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata_speaker);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata_lang:");
    if (this.metadata_lang == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata_lang);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata_timestamp:");
    if (this.metadata_timestamp == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata_timestamp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata_input_text:");
    if (this.metadata_input_text == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata_input_text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata_confidence_score:");
    if (this.metadata_confidence_score == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata_confidence_score);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata_other_possible_responses:");
    if (this.metadata_other_possible_responses == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata_other_possible_responses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata_people_present:");
    if (this.metadata_people_present == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata_people_present);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata_script_id:");
    if (this.metadata_script_id == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata_script_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata_location_geometry_coordinates:");
    if (this.metadata_location_geometry_coordinates == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata_location_geometry_coordinates);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata_location_geometry_type:");
    if (this.metadata_location_geometry_type == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata_location_geometry_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata_location_type:");
    if (this.metadata_location_type == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata_location_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata_location_properties_name:");
    if (this.metadata_location_properties_name == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata_location_properties_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata_scene_id:");
    if (this.metadata_scene_id == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata_scene_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("semantic_keywords:");
    if (this.semantic_keywords == null) {
      sb.append("null");
    } else {
      sb.append(this.semantic_keywords);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("semantic_organisations:");
    if (this.semantic_organisations == null) {
      sb.append("null");
    } else {
      sb.append(this.semantic_organisations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("semantic_people:");
    if (this.semantic_people == null) {
      sb.append("null");
    } else {
      sb.append(this.semantic_people);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("semantic_places:");
    if (this.semantic_places == null) {
      sb.append("null");
    } else {
      sb.append(this.semantic_places);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("semantic_topics:");
    if (this.semantic_topics == null) {
      sb.append("null");
    } else {
      sb.append(this.semantic_topics);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("emotions_detected_emotion:");
    if (this.emotions_detected_emotion == null) {
      sb.append("null");
    } else {
      sb.append(this.emotions_detected_emotion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("emotions_information_state:");
    if (this.emotions_information_state == null) {
      sb.append("null");
    } else {
      sb.append(this.emotions_information_state);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'structure_prepositional_phrases_count' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'structure_adjective_count' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'structure_non_future' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'structure_active_sentences' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'structure_personal_pronouns' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'structure_word_length' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'structure_negations' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'structure_adverbs' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'structure_passive_sentences' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'structure_number_of_sentences' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'structure_future' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'structure_wordcount' because it's a primitive and you chose the non-beans generator.
    if (metadata_speaker == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata_speaker' was not present! Struct: " + toString());
    }
    if (metadata_lang == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata_lang' was not present! Struct: " + toString());
    }
    if (metadata_timestamp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata_timestamp' was not present! Struct: " + toString());
    }
    if (metadata_input_text == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata_input_text' was not present! Struct: " + toString());
    }
    if (metadata_confidence_score == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata_confidence_score' was not present! Struct: " + toString());
    }
    if (metadata_other_possible_responses == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata_other_possible_responses' was not present! Struct: " + toString());
    }
    if (metadata_people_present == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata_people_present' was not present! Struct: " + toString());
    }
    if (metadata_script_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata_script_id' was not present! Struct: " + toString());
    }
    if (metadata_location_geometry_coordinates == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata_location_geometry_coordinates' was not present! Struct: " + toString());
    }
    if (metadata_location_geometry_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata_location_geometry_type' was not present! Struct: " + toString());
    }
    if (metadata_location_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata_location_type' was not present! Struct: " + toString());
    }
    if (metadata_location_properties_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata_location_properties_name' was not present! Struct: " + toString());
    }
    if (metadata_scene_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata_scene_id' was not present! Struct: " + toString());
    }
    if (semantic_keywords == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'semantic_keywords' was not present! Struct: " + toString());
    }
    if (semantic_organisations == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'semantic_organisations' was not present! Struct: " + toString());
    }
    if (semantic_people == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'semantic_people' was not present! Struct: " + toString());
    }
    if (semantic_places == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'semantic_places' was not present! Struct: " + toString());
    }
    if (semantic_topics == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'semantic_topics' was not present! Struct: " + toString());
    }
    if (emotions_detected_emotion == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'emotions_detected_emotion' was not present! Struct: " + toString());
    }
    if (emotions_information_state == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'emotions_information_state' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProcessedRobotPresenterDataStandardSchemeFactory implements SchemeFactory {
    public ProcessedRobotPresenterDataStandardScheme getScheme() {
      return new ProcessedRobotPresenterDataStandardScheme();
    }
  }

  private static class ProcessedRobotPresenterDataStandardScheme extends StandardScheme<ProcessedRobotPresenterData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProcessedRobotPresenterData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STRUCTURE_PREPOSITIONAL_PHRASES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.structure_prepositional_phrases_count = iprot.readI32();
              struct.setStructure_prepositional_phrases_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STRUCTURE_ADJECTIVE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.structure_adjective_count = iprot.readI32();
              struct.setStructure_adjective_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRUCTURE_NON_FUTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.structure_non_future = iprot.readI32();
              struct.setStructure_non_futureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STRUCTURE_ACTIVE_SENTENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.structure_active_sentences = iprot.readI32();
              struct.setStructure_active_sentencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STRUCTURE_PERSONAL_PRONOUNS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.structure_personal_pronouns = iprot.readI32();
              struct.setStructure_personal_pronounsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STRUCTURE_WORD_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.structure_word_length = iprot.readI32();
              struct.setStructure_word_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STRUCTURE_NEGATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.structure_negations = iprot.readI32();
              struct.setStructure_negationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STRUCTURE_ADVERBS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.structure_adverbs = iprot.readI32();
              struct.setStructure_adverbsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STRUCTURE_PASSIVE_SENTENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.structure_passive_sentences = iprot.readI32();
              struct.setStructure_passive_sentencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STRUCTURE_NUMBER_OF_SENTENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.structure_number_of_sentences = iprot.readI32();
              struct.setStructure_number_of_sentencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STRUCTURE_FUTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.structure_future = iprot.readI32();
              struct.setStructure_futureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STRUCTURE_WORDCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.structure_wordcount = iprot.readI32();
              struct.setStructure_wordcountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // METADATA_SPEAKER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata_speaker = iprot.readString();
              struct.setMetadata_speakerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // METADATA_LANG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata_lang = iprot.readString();
              struct.setMetadata_langIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // METADATA_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata_timestamp = iprot.readString();
              struct.setMetadata_timestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // METADATA_INPUT_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata_input_text = iprot.readString();
              struct.setMetadata_input_textIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // METADATA_CONFIDENCE_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata_confidence_score = iprot.readString();
              struct.setMetadata_confidence_scoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // METADATA_OTHER_POSSIBLE_RESPONSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.metadata_other_possible_responses = new ArrayList<String>(_list88.size);
                String _elem89;
                for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                {
                  _elem89 = iprot.readString();
                  struct.metadata_other_possible_responses.add(_elem89);
                }
                iprot.readListEnd();
              }
              struct.setMetadata_other_possible_responsesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // METADATA_PEOPLE_PRESENT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list91 = iprot.readListBegin();
                struct.metadata_people_present = new ArrayList<String>(_list91.size);
                String _elem92;
                for (int _i93 = 0; _i93 < _list91.size; ++_i93)
                {
                  _elem92 = iprot.readString();
                  struct.metadata_people_present.add(_elem92);
                }
                iprot.readListEnd();
              }
              struct.setMetadata_people_presentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // METADATA_SCRIPT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata_script_id = iprot.readString();
              struct.setMetadata_script_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // METADATA_LOCATION_GEOMETRY_COORDINATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                struct.metadata_location_geometry_coordinates = new ArrayList<Double>(_list94.size);
                double _elem95;
                for (int _i96 = 0; _i96 < _list94.size; ++_i96)
                {
                  _elem95 = iprot.readDouble();
                  struct.metadata_location_geometry_coordinates.add(_elem95);
                }
                iprot.readListEnd();
              }
              struct.setMetadata_location_geometry_coordinatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // METADATA_LOCATION_GEOMETRY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata_location_geometry_type = iprot.readString();
              struct.setMetadata_location_geometry_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // METADATA_LOCATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata_location_type = iprot.readString();
              struct.setMetadata_location_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // METADATA_LOCATION_PROPERTIES_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list97 = iprot.readListBegin();
                struct.metadata_location_properties_name = new ArrayList<String>(_list97.size);
                String _elem98;
                for (int _i99 = 0; _i99 < _list97.size; ++_i99)
                {
                  _elem98 = iprot.readString();
                  struct.metadata_location_properties_name.add(_elem98);
                }
                iprot.readListEnd();
              }
              struct.setMetadata_location_properties_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // METADATA_SCENE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata_scene_id = iprot.readString();
              struct.setMetadata_scene_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // SEMANTIC_KEYWORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list100 = iprot.readListBegin();
                struct.semantic_keywords = new ArrayList<String>(_list100.size);
                String _elem101;
                for (int _i102 = 0; _i102 < _list100.size; ++_i102)
                {
                  _elem101 = iprot.readString();
                  struct.semantic_keywords.add(_elem101);
                }
                iprot.readListEnd();
              }
              struct.setSemantic_keywordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // SEMANTIC_ORGANISATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list103 = iprot.readListBegin();
                struct.semantic_organisations = new ArrayList<String>(_list103.size);
                String _elem104;
                for (int _i105 = 0; _i105 < _list103.size; ++_i105)
                {
                  _elem104 = iprot.readString();
                  struct.semantic_organisations.add(_elem104);
                }
                iprot.readListEnd();
              }
              struct.setSemantic_organisationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // SEMANTIC_PEOPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                struct.semantic_people = new ArrayList<String>(_list106.size);
                String _elem107;
                for (int _i108 = 0; _i108 < _list106.size; ++_i108)
                {
                  _elem107 = iprot.readString();
                  struct.semantic_people.add(_elem107);
                }
                iprot.readListEnd();
              }
              struct.setSemantic_peopleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // SEMANTIC_PLACES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list109 = iprot.readListBegin();
                struct.semantic_places = new ArrayList<String>(_list109.size);
                String _elem110;
                for (int _i111 = 0; _i111 < _list109.size; ++_i111)
                {
                  _elem110 = iprot.readString();
                  struct.semantic_places.add(_elem110);
                }
                iprot.readListEnd();
              }
              struct.setSemantic_placesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // SEMANTIC_TOPICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct.semantic_topics = new ArrayList<String>(_list112.size);
                String _elem113;
                for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                {
                  _elem113 = iprot.readString();
                  struct.semantic_topics.add(_elem113);
                }
                iprot.readListEnd();
              }
              struct.setSemantic_topicsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // EMOTIONS_DETECTED_EMOTION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list115 = iprot.readListBegin();
                struct.emotions_detected_emotion = new ArrayList<String>(_list115.size);
                String _elem116;
                for (int _i117 = 0; _i117 < _list115.size; ++_i117)
                {
                  _elem116 = iprot.readString();
                  struct.emotions_detected_emotion.add(_elem116);
                }
                iprot.readListEnd();
              }
              struct.setEmotions_detected_emotionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // EMOTIONS_INFORMATION_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list118 = iprot.readListBegin();
                struct.emotions_information_state = new ArrayList<String>(_list118.size);
                String _elem119;
                for (int _i120 = 0; _i120 < _list118.size; ++_i120)
                {
                  _elem119 = iprot.readString();
                  struct.emotions_information_state.add(_elem119);
                }
                iprot.readListEnd();
              }
              struct.setEmotions_information_stateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStructure_prepositional_phrases_count()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'structure_prepositional_phrases_count' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStructure_adjective_count()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'structure_adjective_count' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStructure_non_future()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'structure_non_future' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStructure_active_sentences()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'structure_active_sentences' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStructure_personal_pronouns()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'structure_personal_pronouns' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStructure_word_length()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'structure_word_length' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStructure_negations()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'structure_negations' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStructure_adverbs()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'structure_adverbs' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStructure_passive_sentences()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'structure_passive_sentences' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStructure_number_of_sentences()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'structure_number_of_sentences' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStructure_future()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'structure_future' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStructure_wordcount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'structure_wordcount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProcessedRobotPresenterData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STRUCTURE_PREPOSITIONAL_PHRASES_COUNT_FIELD_DESC);
      oprot.writeI32(struct.structure_prepositional_phrases_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STRUCTURE_ADJECTIVE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.structure_adjective_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STRUCTURE_NON_FUTURE_FIELD_DESC);
      oprot.writeI32(struct.structure_non_future);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STRUCTURE_ACTIVE_SENTENCES_FIELD_DESC);
      oprot.writeI32(struct.structure_active_sentences);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STRUCTURE_PERSONAL_PRONOUNS_FIELD_DESC);
      oprot.writeI32(struct.structure_personal_pronouns);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STRUCTURE_WORD_LENGTH_FIELD_DESC);
      oprot.writeI32(struct.structure_word_length);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STRUCTURE_NEGATIONS_FIELD_DESC);
      oprot.writeI32(struct.structure_negations);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STRUCTURE_ADVERBS_FIELD_DESC);
      oprot.writeI32(struct.structure_adverbs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STRUCTURE_PASSIVE_SENTENCES_FIELD_DESC);
      oprot.writeI32(struct.structure_passive_sentences);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STRUCTURE_NUMBER_OF_SENTENCES_FIELD_DESC);
      oprot.writeI32(struct.structure_number_of_sentences);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STRUCTURE_FUTURE_FIELD_DESC);
      oprot.writeI32(struct.structure_future);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STRUCTURE_WORDCOUNT_FIELD_DESC);
      oprot.writeI32(struct.structure_wordcount);
      oprot.writeFieldEnd();
      if (struct.metadata_speaker != null) {
        oprot.writeFieldBegin(METADATA_SPEAKER_FIELD_DESC);
        oprot.writeString(struct.metadata_speaker);
        oprot.writeFieldEnd();
      }
      if (struct.metadata_lang != null) {
        oprot.writeFieldBegin(METADATA_LANG_FIELD_DESC);
        oprot.writeString(struct.metadata_lang);
        oprot.writeFieldEnd();
      }
      if (struct.metadata_timestamp != null) {
        oprot.writeFieldBegin(METADATA_TIMESTAMP_FIELD_DESC);
        oprot.writeString(struct.metadata_timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.metadata_input_text != null) {
        oprot.writeFieldBegin(METADATA_INPUT_TEXT_FIELD_DESC);
        oprot.writeString(struct.metadata_input_text);
        oprot.writeFieldEnd();
      }
      if (struct.metadata_confidence_score != null) {
        oprot.writeFieldBegin(METADATA_CONFIDENCE_SCORE_FIELD_DESC);
        oprot.writeString(struct.metadata_confidence_score);
        oprot.writeFieldEnd();
      }
      if (struct.metadata_other_possible_responses != null) {
        oprot.writeFieldBegin(METADATA_OTHER_POSSIBLE_RESPONSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.metadata_other_possible_responses.size()));
          for (String _iter121 : struct.metadata_other_possible_responses)
          {
            oprot.writeString(_iter121);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.metadata_people_present != null) {
        oprot.writeFieldBegin(METADATA_PEOPLE_PRESENT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.metadata_people_present.size()));
          for (String _iter122 : struct.metadata_people_present)
          {
            oprot.writeString(_iter122);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.metadata_script_id != null) {
        oprot.writeFieldBegin(METADATA_SCRIPT_ID_FIELD_DESC);
        oprot.writeString(struct.metadata_script_id);
        oprot.writeFieldEnd();
      }
      if (struct.metadata_location_geometry_coordinates != null) {
        oprot.writeFieldBegin(METADATA_LOCATION_GEOMETRY_COORDINATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.metadata_location_geometry_coordinates.size()));
          for (double _iter123 : struct.metadata_location_geometry_coordinates)
          {
            oprot.writeDouble(_iter123);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.metadata_location_geometry_type != null) {
        oprot.writeFieldBegin(METADATA_LOCATION_GEOMETRY_TYPE_FIELD_DESC);
        oprot.writeString(struct.metadata_location_geometry_type);
        oprot.writeFieldEnd();
      }
      if (struct.metadata_location_type != null) {
        oprot.writeFieldBegin(METADATA_LOCATION_TYPE_FIELD_DESC);
        oprot.writeString(struct.metadata_location_type);
        oprot.writeFieldEnd();
      }
      if (struct.metadata_location_properties_name != null) {
        oprot.writeFieldBegin(METADATA_LOCATION_PROPERTIES_NAME_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.metadata_location_properties_name.size()));
          for (String _iter124 : struct.metadata_location_properties_name)
          {
            oprot.writeString(_iter124);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.metadata_scene_id != null) {
        oprot.writeFieldBegin(METADATA_SCENE_ID_FIELD_DESC);
        oprot.writeString(struct.metadata_scene_id);
        oprot.writeFieldEnd();
      }
      if (struct.semantic_keywords != null) {
        oprot.writeFieldBegin(SEMANTIC_KEYWORDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.semantic_keywords.size()));
          for (String _iter125 : struct.semantic_keywords)
          {
            oprot.writeString(_iter125);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.semantic_organisations != null) {
        oprot.writeFieldBegin(SEMANTIC_ORGANISATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.semantic_organisations.size()));
          for (String _iter126 : struct.semantic_organisations)
          {
            oprot.writeString(_iter126);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.semantic_people != null) {
        oprot.writeFieldBegin(SEMANTIC_PEOPLE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.semantic_people.size()));
          for (String _iter127 : struct.semantic_people)
          {
            oprot.writeString(_iter127);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.semantic_places != null) {
        oprot.writeFieldBegin(SEMANTIC_PLACES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.semantic_places.size()));
          for (String _iter128 : struct.semantic_places)
          {
            oprot.writeString(_iter128);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.semantic_topics != null) {
        oprot.writeFieldBegin(SEMANTIC_TOPICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.semantic_topics.size()));
          for (String _iter129 : struct.semantic_topics)
          {
            oprot.writeString(_iter129);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.emotions_detected_emotion != null) {
        oprot.writeFieldBegin(EMOTIONS_DETECTED_EMOTION_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.emotions_detected_emotion.size()));
          for (String _iter130 : struct.emotions_detected_emotion)
          {
            oprot.writeString(_iter130);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.emotions_information_state != null) {
        oprot.writeFieldBegin(EMOTIONS_INFORMATION_STATE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.emotions_information_state.size()));
          for (String _iter131 : struct.emotions_information_state)
          {
            oprot.writeString(_iter131);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProcessedRobotPresenterDataTupleSchemeFactory implements SchemeFactory {
    public ProcessedRobotPresenterDataTupleScheme getScheme() {
      return new ProcessedRobotPresenterDataTupleScheme();
    }
  }

  private static class ProcessedRobotPresenterDataTupleScheme extends TupleScheme<ProcessedRobotPresenterData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProcessedRobotPresenterData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.structure_prepositional_phrases_count);
      oprot.writeI32(struct.structure_adjective_count);
      oprot.writeI32(struct.structure_non_future);
      oprot.writeI32(struct.structure_active_sentences);
      oprot.writeI32(struct.structure_personal_pronouns);
      oprot.writeI32(struct.structure_word_length);
      oprot.writeI32(struct.structure_negations);
      oprot.writeI32(struct.structure_adverbs);
      oprot.writeI32(struct.structure_passive_sentences);
      oprot.writeI32(struct.structure_number_of_sentences);
      oprot.writeI32(struct.structure_future);
      oprot.writeI32(struct.structure_wordcount);
      oprot.writeString(struct.metadata_speaker);
      oprot.writeString(struct.metadata_lang);
      oprot.writeString(struct.metadata_timestamp);
      oprot.writeString(struct.metadata_input_text);
      oprot.writeString(struct.metadata_confidence_score);
      {
        oprot.writeI32(struct.metadata_other_possible_responses.size());
        for (String _iter132 : struct.metadata_other_possible_responses)
        {
          oprot.writeString(_iter132);
        }
      }
      {
        oprot.writeI32(struct.metadata_people_present.size());
        for (String _iter133 : struct.metadata_people_present)
        {
          oprot.writeString(_iter133);
        }
      }
      oprot.writeString(struct.metadata_script_id);
      {
        oprot.writeI32(struct.metadata_location_geometry_coordinates.size());
        for (double _iter134 : struct.metadata_location_geometry_coordinates)
        {
          oprot.writeDouble(_iter134);
        }
      }
      oprot.writeString(struct.metadata_location_geometry_type);
      oprot.writeString(struct.metadata_location_type);
      {
        oprot.writeI32(struct.metadata_location_properties_name.size());
        for (String _iter135 : struct.metadata_location_properties_name)
        {
          oprot.writeString(_iter135);
        }
      }
      oprot.writeString(struct.metadata_scene_id);
      {
        oprot.writeI32(struct.semantic_keywords.size());
        for (String _iter136 : struct.semantic_keywords)
        {
          oprot.writeString(_iter136);
        }
      }
      {
        oprot.writeI32(struct.semantic_organisations.size());
        for (String _iter137 : struct.semantic_organisations)
        {
          oprot.writeString(_iter137);
        }
      }
      {
        oprot.writeI32(struct.semantic_people.size());
        for (String _iter138 : struct.semantic_people)
        {
          oprot.writeString(_iter138);
        }
      }
      {
        oprot.writeI32(struct.semantic_places.size());
        for (String _iter139 : struct.semantic_places)
        {
          oprot.writeString(_iter139);
        }
      }
      {
        oprot.writeI32(struct.semantic_topics.size());
        for (String _iter140 : struct.semantic_topics)
        {
          oprot.writeString(_iter140);
        }
      }
      {
        oprot.writeI32(struct.emotions_detected_emotion.size());
        for (String _iter141 : struct.emotions_detected_emotion)
        {
          oprot.writeString(_iter141);
        }
      }
      {
        oprot.writeI32(struct.emotions_information_state.size());
        for (String _iter142 : struct.emotions_information_state)
        {
          oprot.writeString(_iter142);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProcessedRobotPresenterData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.structure_prepositional_phrases_count = iprot.readI32();
      struct.setStructure_prepositional_phrases_countIsSet(true);
      struct.structure_adjective_count = iprot.readI32();
      struct.setStructure_adjective_countIsSet(true);
      struct.structure_non_future = iprot.readI32();
      struct.setStructure_non_futureIsSet(true);
      struct.structure_active_sentences = iprot.readI32();
      struct.setStructure_active_sentencesIsSet(true);
      struct.structure_personal_pronouns = iprot.readI32();
      struct.setStructure_personal_pronounsIsSet(true);
      struct.structure_word_length = iprot.readI32();
      struct.setStructure_word_lengthIsSet(true);
      struct.structure_negations = iprot.readI32();
      struct.setStructure_negationsIsSet(true);
      struct.structure_adverbs = iprot.readI32();
      struct.setStructure_adverbsIsSet(true);
      struct.structure_passive_sentences = iprot.readI32();
      struct.setStructure_passive_sentencesIsSet(true);
      struct.structure_number_of_sentences = iprot.readI32();
      struct.setStructure_number_of_sentencesIsSet(true);
      struct.structure_future = iprot.readI32();
      struct.setStructure_futureIsSet(true);
      struct.structure_wordcount = iprot.readI32();
      struct.setStructure_wordcountIsSet(true);
      struct.metadata_speaker = iprot.readString();
      struct.setMetadata_speakerIsSet(true);
      struct.metadata_lang = iprot.readString();
      struct.setMetadata_langIsSet(true);
      struct.metadata_timestamp = iprot.readString();
      struct.setMetadata_timestampIsSet(true);
      struct.metadata_input_text = iprot.readString();
      struct.setMetadata_input_textIsSet(true);
      struct.metadata_confidence_score = iprot.readString();
      struct.setMetadata_confidence_scoreIsSet(true);
      {
        org.apache.thrift.protocol.TList _list143 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.metadata_other_possible_responses = new ArrayList<String>(_list143.size);
        String _elem144;
        for (int _i145 = 0; _i145 < _list143.size; ++_i145)
        {
          _elem144 = iprot.readString();
          struct.metadata_other_possible_responses.add(_elem144);
        }
      }
      struct.setMetadata_other_possible_responsesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list146 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.metadata_people_present = new ArrayList<String>(_list146.size);
        String _elem147;
        for (int _i148 = 0; _i148 < _list146.size; ++_i148)
        {
          _elem147 = iprot.readString();
          struct.metadata_people_present.add(_elem147);
        }
      }
      struct.setMetadata_people_presentIsSet(true);
      struct.metadata_script_id = iprot.readString();
      struct.setMetadata_script_idIsSet(true);
      {
        org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.metadata_location_geometry_coordinates = new ArrayList<Double>(_list149.size);
        double _elem150;
        for (int _i151 = 0; _i151 < _list149.size; ++_i151)
        {
          _elem150 = iprot.readDouble();
          struct.metadata_location_geometry_coordinates.add(_elem150);
        }
      }
      struct.setMetadata_location_geometry_coordinatesIsSet(true);
      struct.metadata_location_geometry_type = iprot.readString();
      struct.setMetadata_location_geometry_typeIsSet(true);
      struct.metadata_location_type = iprot.readString();
      struct.setMetadata_location_typeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list152 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.metadata_location_properties_name = new ArrayList<String>(_list152.size);
        String _elem153;
        for (int _i154 = 0; _i154 < _list152.size; ++_i154)
        {
          _elem153 = iprot.readString();
          struct.metadata_location_properties_name.add(_elem153);
        }
      }
      struct.setMetadata_location_properties_nameIsSet(true);
      struct.metadata_scene_id = iprot.readString();
      struct.setMetadata_scene_idIsSet(true);
      {
        org.apache.thrift.protocol.TList _list155 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.semantic_keywords = new ArrayList<String>(_list155.size);
        String _elem156;
        for (int _i157 = 0; _i157 < _list155.size; ++_i157)
        {
          _elem156 = iprot.readString();
          struct.semantic_keywords.add(_elem156);
        }
      }
      struct.setSemantic_keywordsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list158 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.semantic_organisations = new ArrayList<String>(_list158.size);
        String _elem159;
        for (int _i160 = 0; _i160 < _list158.size; ++_i160)
        {
          _elem159 = iprot.readString();
          struct.semantic_organisations.add(_elem159);
        }
      }
      struct.setSemantic_organisationsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list161 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.semantic_people = new ArrayList<String>(_list161.size);
        String _elem162;
        for (int _i163 = 0; _i163 < _list161.size; ++_i163)
        {
          _elem162 = iprot.readString();
          struct.semantic_people.add(_elem162);
        }
      }
      struct.setSemantic_peopleIsSet(true);
      {
        org.apache.thrift.protocol.TList _list164 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.semantic_places = new ArrayList<String>(_list164.size);
        String _elem165;
        for (int _i166 = 0; _i166 < _list164.size; ++_i166)
        {
          _elem165 = iprot.readString();
          struct.semantic_places.add(_elem165);
        }
      }
      struct.setSemantic_placesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list167 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.semantic_topics = new ArrayList<String>(_list167.size);
        String _elem168;
        for (int _i169 = 0; _i169 < _list167.size; ++_i169)
        {
          _elem168 = iprot.readString();
          struct.semantic_topics.add(_elem168);
        }
      }
      struct.setSemantic_topicsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list170 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.emotions_detected_emotion = new ArrayList<String>(_list170.size);
        String _elem171;
        for (int _i172 = 0; _i172 < _list170.size; ++_i172)
        {
          _elem171 = iprot.readString();
          struct.emotions_detected_emotion.add(_elem171);
        }
      }
      struct.setEmotions_detected_emotionIsSet(true);
      {
        org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.emotions_information_state = new ArrayList<String>(_list173.size);
        String _elem174;
        for (int _i175 = 0; _i175 < _list173.size; ++_i175)
        {
          _elem174 = iprot.readString();
          struct.emotions_information_state.add(_elem174);
        }
      }
      struct.setEmotions_information_stateIsSet(true);
    }
  }

}

